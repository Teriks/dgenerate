{"--verbose": "Output information useful for debugging, such as pipeline call and model load parameters.", "--version": "Show dgenerate's version and exit", "--file": "Convenience argument for reading a configuration script from a file instead of using a pipe. This is\na meta argument which can not be used within a configuration script and is only valid from the\ncommand line or during a popen invocation of dgenerate. This argument understands glob syntax, even\non windows, and can accept multiple config file names, which will be executed in sequence.", "--shell": "When reading configuration from STDIN (a pipe), read forever, even when configuration errors occur.\nThis allows dgenerate to run in the background and be controlled by another process sending\ncommands. Launching dgenerate with this option and not piping it input will attach it to the\nterminal like a shell. Entering configuration into this shell requires two newlines to submit a\ncommand due to parsing lookahead. IE: two presses of the enter key. This is a meta argument which\ncan not be used within a configuration script and is only valid from the command line or during a\npopen invocation of dgenerate.", "--no-stdin": "Can be used to indicate to dgenerate that it will not receive any piped in input. This is useful for\nrunning dgenerate via popen from Python or another application using normal arguments, where it\nwould otherwise try to read from STDIN and block forever because it is not attached to a terminal.\nThis is a meta argument which can not be used within a configuration script and is only valid from\nthe command line or during a popen invocation of dgenerate.", "--console": "Launch a terminal-like Tkinter GUI that interacts with an instance of dgenerate running in the\nbackground. This allows you to interactively write dgenerate config scripts as if dgenerate were a\nshell / REPL. This is a meta argument which can not be used within a configuration script and is\nonly valid from the command line or during a popen invocation of dgenerate.", "--plugin-modules": "Specify one or more plugin module folder paths (folder containing __init__.py) or Python .py file\npaths, or Python module names to load as plugins. Plugin modules can currently implement image\nprocessors, config directives, config template functions, prompt weighters, and sub-commands.", "--sub-command": "Specify the name a sub-command to invoke. dgenerate exposes some extra image processing\nfunctionality through the use of sub-commands. Sub commands essentially replace the entire set of\naccepted arguments with those of a sub-command which implements additional functionality. See\n--sub-command-help for a list of sub-commands and help.", "--sub-command-help": "Use this option alone (or with --plugin-modules) and no model specification in order to list\navailable sub-command names. Calling a sub-command with \"--sub-command name --help\" will produce\nargument help output for that sub-command. When used with --plugin-modules, sub-commands implemented\nby the specified plugins will also be listed.", "--offline-mode": "Prevent dgenerate from downloading Hugging Face models that do not exist in the disk cache or a\nfolder on disk. Referencing a model on Hugging Face hub that has not been cached because it was not\npreviously downloaded will result in a failure when using this option.", "--templates-help": "Print a list of template variables available in the interpreter environment used for dgenerate\nconfig scripts, particularly the variables set after a dgenerate invocation occurs. When used as a\ncommand line option, their values are not presented, just their names and types. Specifying names\nwill print type information for those variable names.", "--directives-help": "Use this option alone (or with --plugin-modules) and no model specification in order to list\navailable config directive names. Providing names will print documentation for the specified\ndirective names. When used with --plugin-modules, directives implemented by the specified plugins\nwill also be listed.", "--functions-help": "Use this option alone (or with --plugin-modules) and no model specification in order to list\navailable config template function names. Providing names will print documentation for the specified\nfunction names. When used with --plugin-modules, functions implemented by the specified plugins will\nalso be listed.", "--global-config": "Provide a json, yaml, or toml file to configure dgenerate's global settings. These settings include\nvarious default values for generation and garbage collection settings for the in memory caches.", "--model-type": "Use when loading different model types. Currently supported: torch, torch-pix2pix, torch-sdxl,\ntorch-sdxl-pix2pix, torch-kolors, torch-upscaler-x2, torch-upscaler-x4, torch-if, torch-ifs,\ntorch-ifs-img2img, torch-s-cascade, torch-sd3, torch-flux, or torch-flux-fill. (default: torch)", "--revision": "The model revision to use when loading from a Hugging Face repository, (The Git branch / tag,\ndefault is \"main\")", "--variant": "If specified when loading from a Hugging Face repository or folder, load weights from \"variant\"\nfilename, e.g. \"pytorch_model.<variant>.safetensors\". Defaults to automatic selection.", "--subfolder": "Main model subfolder. If specified when loading from a Hugging Face repository or folder, load\nweights from the specified subfolder.", "--original-config": "This argument can be used to supply an original LDM config .yaml file that was provided with a\nsingle file checkpoint.", "--second-model-original-config": "This argument can be used to supply an original LDM config .yaml file that was provided with a\nsingle file checkpoint for the secondary model, i.e. the SDXL Refiner or Stable Cascade Decoder.", "--auth-token": "Huggingface auth token. Required to download restricted repositories that have access permissions\ngranted to your Hugging Face account.", "--batch-size": "The number of image variations to produce per set of individual diffusion parameters in one\nrendering step simultaneously on a single GPU. When generating animations with a --batch-size\ngreater than one, a separate animation (with the filename suffix \"animation_N\") will be written to\nfor each image in the batch. If --batch-grid-size is specified when producing an animation then the\nimage grid is used for the output frames. During animation rendering each image in the batch will\nstill be written to the output directory along side the produced animation as either suffixed files\nor image grids depending on the options you choose. (Default: 1)", "--batch-grid-size": "Produce a single image containing a grid of images with the number of COLUMNSxROWS given to this\nargument when --batch-size is greater than 1. If not specified with a --batch-size greater than 1,\nimages will be written individually with an image number suffix (image_N) in the filename signifying\nwhich image in the batch they are.", "--adetailer-detectors": "Specify one or more adetailer YOLO detector model URIs. When specifying this option, you must\nprovide an image to --image-seeds, inpaint masks will be auto generated based on what is detected by\nthe provided detector models. The models will be used in sequence to detect and then inpaint your\nimage within the detection areas. This can be used for face detailing, face swapping, hand\ndetailing, etc. on any arbitrary image provided using an image generation model of your choice. This\noption supports: --model-type torch, torch-sdxl, torch-kolors, torch-sd3, torch-flux, and\ntorch-flux-fill Example: --adetailer-detectors Bingsu/adetailer;weight-name=face_yolov8n.pt The\n\"revision\" argument specifies the model revision to use for the adetailer model when loading from\nHugging Face repository, (The Git branch / tag, default is \"main\"). The \"subfolder\" argument\nspecifies the adetailer model subfolder, if specified when loading from a Hugging Face repository or\nfolder, weights from the specified subfolder. The \"weight-name\" argument indicates the name of the\nweights file to be loaded when loading from a Hugging Face repository or folder on disk. The\n\"index-filter\" (overrides --adetailer-index-filter) argument is a list values or a single value that\nindicates what YOLO detection indices to keep, the index values start at zero. Detections are sorted\nby their top left bounding box coordinate from left to right, top to bottom, by (confidence\ndescending). The order of detections in the image is identical to the reading order of words on a\npage (english). Inpainting will only be preformed on the specified detection indices, if no indices\nare specified, then inpainting will be preformed on all detections. Example \"index-filter\" values: *\nkeep the first, leftmost, topmost detection: index-filter=0 * keep detections 1 and 3:\nindex-filter=[1, 3] * CSV syntax is supported (tuple): index-filter=1,3 The \"detector-padding\"\n(overrides --adetailer-detector-paddings) argument specifies the amount of padding that will be\nadded to the detection rectangle which is used to generate a masked area. The default is 0, you can\nmake the mask area around the detected feature larger with positive padding and smaller with\nnegative padding. Padding examples: 32 (32px Uniform, all sides) 10x20 (10px Horizontal, 20px\nVertical) 10x20x30x40 (10px Left, 20px Top, 30px Right, 40px Bottom) The \"mask-padding\" (overrides\n--adetailer-mask-paddings) argument indicates how much padding to place around the masked area when\ncropping out the image to be inpainted. This value must be large enough to accommodate any\nfeathering on the edge of the mask caused by \"mask-blur\" or \"mask-dilation\" for the best result, the\ndefault value is 32. The syntax for specifying this value is identical to \"detector-padding\". The\n\"mask-shape\" (overrides --adetailer-mask-shapes) argument indicates what mask shape adetailer should\nattempt to draw around a detected feature, the default value is \"rectangle\". You may also specify\n\"circle\" to generate an ellipsoid shaped mask, which might be helpful for achieving better blending.\nThe \"mask-blur\" (overrides --adetailer-mask-blurs) argument indicates the level of gaussian blur to\napply to the generated inpaint mask, which can help with smooth blending in of the inpainted feature\nThe \"mask-dilation\" (overrides --adetailer-mask-dilations) argument indicates the amount of dilation\napplied to the inpaint mask, see: cv2.dilate The \"confidence\" argument indicates the confidence\nvalue to use with the YOLO detector model, this value defaults to 0.3 if not specified. The \"prompt\"\n(overrides --prompt positive) argument overrides the positive inpainting prompt for detections by\nthis detector. The \"negative-prompt\" (overrides --prompt negative) argument overrides the negative\ninpainting prompt for detections by this detector. The \"device\" argument indicates a device override\nfor the YOLO detector model, the detector model can be set to run on a different device if desired,\nfor example: cuda:0, cuda:1, cpu, etc. It runs on the same device as --device by default. If you\nwish to load a weights file directly from disk, use: --adetailer-detectors \"yolo_model.pt\" You may\nalso load a YOLO model directly from a URL or Hugging Face blob link. Example: --adetailer-detectors\nhttps://modelsite.com/yolo-model.pt", "--adetailer-index-filter": "A list index values that indicates what adetailer YOLO detection indices to keep, the index values\nstart at zero. Detections are sorted by their top left bounding box coordinate from left to right,\ntop to bottom, by (confidence descending). The order of detections in the image is identical to the\nreading order of words on a page (english). Inpainting will only be preformed on the specified\ndetection indices, if no indices are specified, then inpainting will be preformed on all detections.", "--adetailer-mask-shapes": "One or more adetailer mask shapes to try. This indicates what mask shape adetailer should attempt to\ndraw around a detected feature, the default value is \"rectangle\". You may also specify \"circle\" to\ngenerate an ellipsoid shaped mask, which might be helpful for achieving better blending. (default:\nrectangle).", "--adetailer-detector-paddings": "One or more adetailer detector padding values to try. This value specifies the amount of padding\nthat will be added to the detection rectangle which is used to generate a masked area. The default\nis 0, you can make the mask area around the detected feature larger with positive padding and\nsmaller with negative padding. Example: 32 (32px Uniform, all sides) 10x20 (10px Horizontal, 20px\nVertical) 10x20x30x40 (10px Left, 20px Top, 30px Right, 40px Bottom) (default: 0).", "--adetailer-mask-paddings": "One or more adetailer mask padding values to try. This value indicates how much padding to place\naround the masked area when cropping out the image to be inpainted, this value must be large enough\nto accommodate any feathering on the edge of the mask caused by \"--adetailer-mask-blurs\" or\n\"--adetailer-mask-dilations\" for the best result. Example: 32 (32px Uniform, all sides) 10x20 (10px\nHorizontal, 20px Vertical) 10x20x30x40 (10px Left, 20px Top, 30px Right, 40px Bottom) (default: 32).", "--adetailer-mask-blurs": "The level of gaussian blur to apply to the generated adetailer inpaint mask, which can help with\nsmooth blending in of the inpainted feature. (default: 4)", "--adetailer-mask-dilations": "The amount of dilation applied to the adetailer inpaint mask, see: cv2.dilate. (default: 4)", "--adetailer-crop-control-image": "Should adetailer crop ControlNet control images to the feature detection area? Your input image and\ncontrol image should be the the same dimension, otherwise this argument is ignored with a warning.\nWhen this argument is not specified, the control image provided is simply resized to the same size\nas the detection area.", "--text-encoders": "Specify Text Encoders for the main model using URIs, main models may use one or more text encoders\ndepending on the --model-type value and other dgenerate arguments. See: --text-encoders help for\ninformation about what text encoders are needed for your invocation. Examples:\n\"CLIPTextModel;model=huggingface/text_encoder\",\n\"CLIPTextModelWithProjection;model=huggingface/text_encoder;revision=main\",\n\"T5EncoderModel;model=text_encoder_folder_on_disk\",\n\"DistillT5EncoderModel;model=text_encoder_folder_on_disk\". For main models which require multiple\ntext encoders, the + symbol may be used to indicate that a default value should be used for a\nparticular text encoder, for example: --text-encoders + + huggingface/encoder3. Any trailing text\nencoders which are not specified are given their default value. The value \"null\" may be used to\nindicate that a specific text encoder should not be loaded. The \"revision\" argument specifies the\nmodel revision to use for the Text Encoder when loading from Hugging Face repository, (The Git\nbranch / tag, default is \"main\"). The \"variant\" argument specifies the Text Encoder model variant.\nIf \"variant\" is specified when loading from a Hugging Face repository or folder, weights will be\nloaded from \"variant\" filename, e.g. \"pytorch_model.<variant>.safetensors\". For this argument,\n\"variant\" defaults to the value of --variant if it is not specified in the URI. The \"subfolder\"\nargument specifies the Text Encoder model subfolder, if specified when loading from a Hugging Face\nrepository or folder, weights from the specified subfolder. If you are loading from a combined\nsingle file checkpoint containing multiple components, this value will be used to determine the key\nin the checkpoint that contains the text encoder, by default \"text_encoder\" is used if subfolder is\nnot provided. The \"dtype\" argument specifies the Text Encoder model precision, it defaults to the\nvalue of -t/--dtype and should be one of: auto, bfloat16, float16, or float32. The \"quantizer\"\nargument specifies a quantization backend and configuration for the Text Encoder model individually,\nand uses the same URI syntax as --quantizer. This is supported when loading from Hugging Face repo\nslugs / folders on disk, and when using the \"mode\" argument with monolithic (non-sharded)\ncheckpoints. This is *not* supported when loading a submodule out of a combined checkpoint file with\n\"subfolder\". If working from the command line you may need to nested quote this URI, i.e:\n--text-encoders 'CLIPTextModel;model=huggingface/text_encoder;quantizer=\"bnb;bits=8\"' The \"mode\"\nargument can be used to load monolithic single file \"clip-l\", \"clip-g\", or \"t5-xxl\" checkpoints,\nthis is useful in some cases to load ComfyUI compatible text encoder checkpoints, this works with\n\"quantizer\" as well, where as loading a sub-model out of a single file checkpoint does not. This\nvalue may be \"clip-l\", \"clip-g\" or \"t5-xxl\". For instance when using Flux, one could specify:\nCLIPTextModel;model=https://huggingface.co/comfyanonymous/flux_text_encoders/blob/main/clip_l.safetensors;mode=clip-l\nT5EncoderModel;model=https://huggingface.co/comfyanonymous/flux_text_encoders/blob/main/t5xxl_fp16.safetensors;mode=t5-xxl\nThe \"mode\" option is mutually exclusive with \"subfolder\". If you wish to load weights directly from\na path on disk, you must point this argument at the folder they exist in, which should also contain\nthe config.json file for the Text Encoder. For example, a downloaded repository folder from Hugging\nFace.", "--second-model-text-encoders": "--text-encoders but for the SDXL refiner or Stable Cascade decoder model.", "--unet": "Specify a UNet using a URI. Examples: \"huggingface/unet\", \"huggingface/unet;revision=main\",\n\"unet_folder_on_disk\". The \"revision\" argument specifies the model revision to use for the UNet when\nloading from Hugging Face repository, (The Git branch / tag, default is \"main\"). The \"variant\"\nargument specifies the UNet model variant. If \"variant\" is specified when loading from a Hugging\nFace repository or folder, weights will be loaded from \"variant\" filename, e.g.\n\"pytorch_model.<variant>.safetensors. For this argument, \"variant\" defaults to the value of\n--variant if it is not specified in the URI. The \"subfolder\" argument specifies the UNet model\nsubfolder, if specified when loading from a Hugging Face repository or folder, weights from the\nspecified subfolder. If you are loading from a combined single file checkpoint containing multiple\ncomponents, this value will be used to determine the key in the checkpoint that contains the unet,\nby default \"unet\" is used if subfolder is not provided. The \"dtype\" argument specifies the UNet\nmodel precision, it defaults to the value of -t/--dtype and should be one of: auto, bfloat16,\nfloat16, or float32. The \"quantizer\" argument specifies a quantization backend and configuration for\nthe UNet model individually, and uses the same URI syntax as --quantizer. If working from the\ncommand line you may need to nested quote this URI, i.e: --unet\n'huggingface/unet;quantizer=\"bnb;bits=8\"' If you wish to load weights directly from a path on disk,\nyou must point this argument at the folder they exist in, which should also contain the config.json\nfile for the UNet. For example, a downloaded repository folder from Hugging Face.", "--second-model-unet": "Specify a second UNet, this is only valid when using SDXL or Stable Cascade model types. This UNet\nwill be used for the SDXL refiner, or Stable Cascade decoder model.", "--transformer": "Specify a Stable Diffusion 3 or Flux Transformer model using a URI. Examples:\n\"huggingface/transformer\", \"huggingface/transformer;revision=main\", \"transformer_folder_on_disk\".\nBlob links / single file loads are supported for SD3 Transformers. The \"revision\" argument specifies\nthe model revision to use for the Transformer when loading from Hugging Face repository or blob\nlink, (The Git branch / tag, default is \"main\"). The \"variant\" argument specifies the Transformer\nmodel variant. If \"variant\" is specified when loading from a Hugging Face repository or folder,\nweights will be loaded from \"variant\" filename, e.g. \"pytorch_model.<variant>.safetensors. For this\nargument, \"variant\" defaults to the value of --variant if it is not specified in the URI. The\n\"subfolder\" argument specifies the Transformer model subfolder, if specified when loading from a\nHugging Face repository or folder, weights from the specified subfolder. The \"dtype\" argument\nspecifies the Transformer model precision, it defaults to the value of -t/--dtype and should be one\nof: auto, bfloat16, float16, or float32. The \"quantizer\" argument specifies a quantization backend\nand configuration for the Transformer model individually, and uses the same URI syntax as\n--quantizer. If working from the command line you may need to nested quote this URI, i.e:\n--transformer 'huggingface/transformer;quantizer=\"bnb;bits=8\"' If you wish to load a weights file\ndirectly from disk, the simplest way is: --transformer \"transformer.safetensors\", or with a dtype\n\"transformer.safetensors;dtype=float16\". All loading arguments except \"dtype\" and \"quantizer\" are\nunused in this case and may produce an error message if used. If you wish to load a specific weight\nfile from a Hugging Face repository, use the blob link loading syntax: --transformer\n\"AutoencoderKL;https://huggingface.co/UserName/repository-name/blob/main/transformer.safetensors\",\nthe \"revision\" argument may be used with this syntax.", "--vae": "Specify a VAE using a URI, the URI syntax is: \"AutoEncoderClass;model=(Hugging Face repository\nslug/blob link or file/folder path)\". Examples: \"AutoencoderKL;model=vae.pt\",\n\"AsymmetricAutoencoderKL;model=huggingface/vae\", \"AutoencoderTiny;model=huggingface/vae\",\n\"ConsistencyDecoderVAE;model=huggingface/vae\". The AutoencoderKL encoder class accepts Hugging Face\nrepository slugs/blob links, .pt, .pth, .bin, .ckpt, and .safetensors files. Other encoders can only\naccept Hugging Face repository slugs/blob links, or a path to a folder on disk with the model\nconfiguration and model file(s). If an AutoencoderKL VAE model file exists at a URL which serves the\nfile as a raw download, you may provide an http/https link to it and it will be downloaded to\ndgenerate's web cache. Aside from the \"model\" argument, there are four other optional arguments that\ncan be specified, these are: \"revision\", \"variant\", \"subfolder\", \"dtype\". They can be specified as\nso in any order, they are not positional:\n\"AutoencoderKL;model=huggingface/vae;revision=main;variant=fp16;subfolder=sub_folder;dtype=float16\".\nThe \"revision\" argument specifies the model revision to use for the VAE when loading from Hugging\nFace repository or blob link, (The Git branch / tag, default is \"main\"). The \"variant\" argument\nspecifies the VAE model variant. If \"variant\" is specified when loading from a Hugging Face\nrepository or folder, weights will be loaded from \"variant\" filename, e.g.\n\"pytorch_model.<variant>.safetensors. \"variant\" in the case of --vae does not default to the value\nof --variant to prevent failures during common use cases. The \"subfolder\" argument specifies the VAE\nmodel subfolder, if specified when loading from a Hugging Face repository or folder, weights from\nthe specified subfolder. The \"extract\" argument specifies that \"model\" points at a combind single\nfile checkpoint containing multiple components such as the UNet and Text Encoders, and that we\nshould extract the VAE. When using this argument you can use \"subfolder\" to indicate the key in the\ncheckpoint containing the model, this defaults to \"vae\". The \"dtype\" argument specifies the VAE\nmodel precision, it defaults to the value of -t/--dtype and should be one of: auto, bfloat16,\nfloat16, or float32. If you wish to load a weights file directly from disk, the simplest way is:\n--vae \"AutoencoderKL;my_vae.safetensors\", or with a dtype\n\"AutoencoderKL;my_vae.safetensors;dtype=float16\". All loading arguments except \"dtype\" are unused in\nthis case and may produce an error message if used. If you wish to load a specific weight file from\na Hugging Face repository, use the blob link loading syntax: --vae\n\"AutoencoderKL;https://huggingface.co/UserName/repository-name/blob/main/vae_model.safetensors\", the\n\"revision\" argument may be used with this syntax.", "--vae-tiling": "Enable VAE tiling. Assists in the generation of large images with lower memory overhead. The VAE\nwill split the input tensor into tiles to compute decoding and encoding in several steps. This is\nuseful for saving a large amount of memory and to allow processing larger images. Note that if you\nare using --control-nets you may still run into memory issues generating large images, or with\n--batch-size greater than 1.", "--vae-slicing": "Enable VAE slicing. Assists in the generation of large images with lower memory overhead. The VAE\nwill split the input tensor in slices to compute decoding in several steps. This is useful to save\nsome memory, especially when --batch-size is greater than 1. Note that if you are using\n--control-nets you may still run into memory issues generating large images.", "--loras": "Specify one or more LoRA models using URIs. These should be a Hugging Face repository slug, path to\nmodel file on disk (for example, a .pt, .pth, .bin, .ckpt, or .safetensors file), or model folder\ncontaining model files. If a LoRA model file exists at a URL which serves the file as a raw\ndownload, you may provide an http/https link to it and it will be downloaded to dgenerate's web\ncache. Hugging Face blob links are not supported, see \"subfolder\" and \"weight-name\" below instead.\nOptional arguments can be provided after a LoRA model specification, these are: \"scale\", \"revision\",\n\"subfolder\", and \"weight-name\". They can be specified as so in any order, they are not positional:\n\"huggingface/lora;scale=1.0;revision=main;subfolder=repo_subfolder;weight-name=lora.safetensors\".\nThe \"scale\" argument indicates the scale factor of the LoRA. The \"revision\" argument specifies the\nmodel revision to use for the LoRA when loading from Hugging Face repository, (The Git branch / tag,\ndefault is \"main\"). The \"subfolder\" argument specifies the LoRA model subfolder, if specified when\nloading from a Hugging Face repository or folder, weights from the specified subfolder. The\n\"weight-name\" argument indicates the name of the weights file to be loaded when loading from a\nHugging Face repository or folder on disk. If you wish to load a weights file directly from disk,\nthe simplest way is: --loras \"my_lora.safetensors\", or with a scale \"my_lora.safetensors;scale=1.0\",\nall other loading arguments are unused in this case and may produce an error message if used.", "--lora-fuse-scale": "LoRA weights are merged into the main model at this scale. When specifying multiple LoRA models,\nthey are fused together into one set of weights using their individual scale values, after which\nthey are fused into the main model at this scale value. (default: 1.0).", "--image-encoder": "Specify an Image Encoder using a URI. Image Encoders are used with --ip-adapters models, and must be\nspecified if none of the loaded --ip-adapters contain one. An error will be produced in this\nsituation, which requires you to use this argument. An image encoder can also be manually specified\nfor Stable Cascade models. Examples: \"huggingface/image_encoder\",\n\"huggingface/image_encoder;revision=main\", \"image_encoder_folder_on_disk\". Blob links / single file\nloads are not supported for Image Encoders. The \"revision\" argument specifies the model revision to\nuse for the Image Encoder when loading from Hugging Face repository or blob link, (The Git branch /\ntag, default is \"main\"). The \"variant\" argument specifies the Image Encoder model variant. If\n\"variant\" is specified when loading from a Hugging Face repository or folder, weights will be loaded\nfrom \"variant\" filename, e.g. \"pytorch_model.<variant>.safetensors. Similar to --vae, \"variant\" does\nnot default to the value of --variant in order to prevent errors with common use cases. If you\nspecify multiple IP Adapters, they must all have the same \"variant\" value or you will receive a\nusage error. The \"subfolder\" argument specifies the Image Encoder model subfolder, if specified when\nloading from a Hugging Face repository or folder, weights from the specified subfolder. The \"dtype\"\nargument specifies the Image Encoder model precision, it defaults to the value of -t/--dtype and\nshould be one of: auto, bfloat16, float16, or float32. If you wish to load weights directly from a\npath on disk, you must point this argument at the folder they exist in, which should also contain\nthe config.json file for the Image Encoder. For example, a downloaded repository folder from Hugging\nFace.", "--ip-adapters": "Specify one or more IP Adapter models using URIs. These should be a Hugging Face repository slug,\npath to model file on disk (for example, a .pt, .pth, .bin, .ckpt, or .safetensors file), or model\nfolder containing model files. If an IP Adapter model file exists at a URL which serves the file as\na raw download, you may provide an http/https link to it and it will be downloaded to dgenerate's\nweb cache. Hugging Face blob links are not supported, see \"subfolder\" and \"weight-name\" below\ninstead. Optional arguments can be provided after an IP Adapter model specification, these are:\n\"scale\", \"revision\", \"subfolder\", and \"weight-name\". They can be specified as so in any order, they\nare not positional:\n\"huggingface/ip-adapter;scale=1.0;revision=main;subfolder=repo_subfolder;weight-name=ip_adapter.safetensors\".\nThe \"scale\" argument indicates the scale factor of the IP Adapter. The \"revision\" argument specifies\nthe model revision to use for the IP Adapter when loading from Hugging Face repository, (The Git\nbranch / tag, default is \"main\"). The \"subfolder\" argument specifies the IP Adapter model subfolder,\nif specified when loading from a Hugging Face repository or folder, weights from the specified\nsubfolder. The \"weight-name\" argument indicates the name of the weights file to be loaded when\nloading from a Hugging Face repository or folder on disk. If you wish to load a weights file\ndirectly from disk, the simplest way is: --ip-adapters \"ip_adapter.safetensors\", or with a scale\n\"ip_adapter.safetensors;scale=1.0\", all other loading arguments are unused in this case and may\nproduce an error message if used.", "--textual-inversions": "Specify one or more Textual Inversion models using URIs. These should be a Hugging Face repository\nslug, path to model file on disk (for example, a .pt, .pth, .bin, .ckpt, or .safetensors file), or\nmodel folder containing model files. If a Textual Inversion model file exists at a URL which serves\nthe file as a raw download, you may provide an http/https link to it and it will be downloaded to\ndgenerate's web cache. Hugging Face blob links are not supported, see \"subfolder\" and \"weight-name\"\nbelow instead. Optional arguments can be provided after the Textual Inversion model specification,\nthese are: \"token\", \"revision\", \"subfolder\", and \"weight-name\". They can be specified as so in any\norder, they are not positional:\n\"huggingface/ti_model;revision=main;subfolder=repo_subfolder;weight-name=ti_model.safetensors\". The\n\"token\" argument can be used to override the prompt token used for the textual inversion prompt\nembedding. For normal Stable Diffusion the default token value is provided by the model itself, but\nfor Stable Diffusion XL and Flux the default token value is equal to the model file name with no\nextension and all spaces replaced by underscores. The \"revision\" argument specifies the model\nrevision to use for the Textual Inversion model when loading from Hugging Face repository, (The Git\nbranch / tag, default is \"main\"). The \"subfolder\" argument specifies the Textual Inversion model\nsubfolder, if specified when loading from a Hugging Face repository or folder, weights from the\nspecified subfolder. The \"weight-name\" argument indicates the name of the weights file to be loaded\nwhen loading from a Hugging Face repository or folder on disk. If you wish to load a weights file\ndirectly from disk, the simplest way is: --textual-inversions \"my_ti_model.safetensors\", all other\nloading arguments are unused in this case and may produce an error message if used.", "--control-nets": "Specify one or more ControlNet models using URIs. This should be a Hugging Face repository slug /\nblob link, path to model file on disk (for example, a .pt, .pth, .bin, .ckpt, or .safetensors file),\nor model folder containing model files. If a ControlNet model file exists at a URL which serves the\nfile as a raw download, you may provide an http/https link to it and it will be downloaded to\ndgenerate's web cache. Optional arguments can be provided after the ControlNet model specification,\nthese are: \"scale\", \"start\", \"end\", \"revision\", \"variant\", \"subfolder\", and \"dtype\". They can be\nspecified as so in any order, they are not positional:\n\"huggingface/controlnet;scale=1.0;start=0.0;end=1.0;revision=main;variant=fp16;subfolder=repo_subfolder;dtype=float16\".\nThe \"scale\" argument specifies the scaling factor applied to the ControlNet model, the default value\nis 1.0. The \"start\" argument specifies at what fraction of the total inference steps to begin\napplying the ControlNet, defaults to 0.0, IE: the very beginning. The \"end\" argument specifies at\nwhat fraction of the total inference steps to stop applying the ControlNet, defaults to 1.0, IE: the\nvery end. The \"mode\" argument can be used when using --model-type torch-flux and ControlNet Union to\nspecify the ControlNet mode. Acceptable values are: \"canny\", \"tile\", \"depth\", \"blur\", \"pose\",\n\"gray\", \"lq\". This value may also be an integer between 0 and 6, inclusive. The \"revision\" argument\nspecifies the model revision to use for the ControlNet model when loading from Hugging Face\nrepository, (The Git branch / tag, default is \"main\"). The \"variant\" argument specifies the\nControlNet model variant, if \"variant\" is specified when loading from a Hugging Face repository or\nfolder, weights will be loaded from \"variant\" filename, e.g. \"pytorch_model.<variant>.safetensors.\n\"variant\" defaults to automatic selection. \"variant\" in the case of --control-nets does not default\nto the value of --variant to prevent failures during common use cases. The \"subfolder\" argument\nspecifies the ControlNet model subfolder, if specified when loading from a Hugging Face repository\nor folder, weights from the specified subfolder. The \"dtype\" argument specifies the ControlNet model\nprecision, it defaults to the value of -t/--dtype and should be one of: auto, bfloat16, float16, or\nfloat32. If you wish to load a weights file directly from disk, the simplest way is: --control-nets\n\"my_controlnet.safetensors\" or --control-nets \"my_controlnet.safetensors;scale=1.0;dtype=float16\",\nall other loading arguments aside from \"scale\", \"start\", \"end\", and \"dtype\" are unused in this case\nand may produce an error message if used. If you wish to load a specific weight file from a Hugging\nFace repository, use the blob link loading syntax: --control-nets\n\"https://huggingface.co/UserName/repository-name/blob/main/controlnet.safetensors\", the \"revision\"\nargument may be used with this syntax.", "--t2i-adapters": "Specify one or more T2IAdapter models using URIs. This should be a Hugging Face repository slug /\nblob link, path to model file on disk (for example, a .pt, .pth, .bin, .ckpt, or .safetensors file),\nor model folder containing model files. If a T2IAdapter model file exists at a URL which serves the\nfile as a raw download, you may provide an http/https link to it and it will be downloaded to\ndgenerate's web cache. Optional arguments can be provided after the T2IAdapter model specification,\nthese are: \"scale\", \"revision\", \"variant\", \"subfolder\", and \"dtype\". They can be specified as so in\nany order, they are not positional:\n\"huggingface/t2iadapter;scale=1.0;revision=main;variant=fp16;subfolder=repo_subfolder;dtype=float16\".\nThe \"scale\" argument specifies the scaling factor applied to the T2IAdapter model, the default value\nis 1.0. The \"revision\" argument specifies the model revision to use for the T2IAdapter model when\nloading from Hugging Face repository, (The Git branch / tag, default is \"main\"). The \"variant\"\nargument specifies the T2IAdapter model variant, if \"variant\" is specified when loading from a\nHugging Face repository or folder, weights will be loaded from \"variant\" filename, e.g.\n\"pytorch_model.<variant>.safetensors. \"variant\" defaults to automatic selection. \"variant\" in the\ncase of --t2i-adapters does not default to the value of --variant to prevent failures during common\nuse cases. The \"subfolder\" argument specifies the ControlNet model subfolder, if specified when\nloading from a Hugging Face repository or folder, weights from the specified subfolder. The \"dtype\"\nargument specifies the T2IAdapter model precision, it defaults to the value of -t/--dtype and should\nbe one of: auto, bfloat16, float16, or float32. If you wish to load a weights file directly from\ndisk, the simplest way is: --t2i-adapters \"my_t2i_adapter.safetensors\" or --t2i-adapters\n\"my_t2i_adapter.safetensors;scale=1.0;dtype=float16\", all other loading arguments aside from \"scale\"\nand \"dtype\" are unused in this case and may produce an error message if used. If you wish to load a\nspecific weight file from a Hugging Face repository, use the blob link loading syntax:\n--t2i-adapters \"https://huggingface.co/UserName/repository-name/blob/main/t2i_adapter.safetensors\",\nthe \"revision\" argument may be used with this syntax.", "--quantizer": "Global quantization configuration via URI. This URI specifies the quantization backend and its\nconfiguration. Quantization will be applied to all text encoders, and unet / transformer models with\nthe provided settings when using this argument. If you wish to specify different quantization types\nper encoder or unet / transformer, you should use the \"quantizer\" URI argument of --text-encoders\nand or --unet / --transformer to specify the quantization settings on a per model basis. Available\nbackends are: (bnb / bitsandbytes) bitsandbytes can be specified with \"bnb\" or \"bitsandbytes\"\nExample: --quantizer bnb;bits=4 or: --quantizer bitsandbytes;bits=4 The bitsandbytes backend URI\npossesses these arguments and defaults: * bits: int = 8 (must be 4 or 8) * bits4-compute-dtype: str\n= None (auto set when not specified) * bits4-quant-type: str = \"fp4\" * bits4-use-double-quant =\nFalse, * bits4-quant-storage: str = None", "--second-model-quantizer": "Global quantization configuration via URI for the secondary model, such as the SDXL Refiner or\nStable Cascade decoder. See --quantizer for syntax examples.", "--scheduler": "Specify a scheduler (sampler) by URI. Passing \"help\" to this argument will print the compatible\nschedulers for a model without generating any images. Passing \"helpargs\" will yield a help message\nwith a list of overridable arguments for each scheduler and their typical defaults. Arguments listed\nby \"helpargs\" can be overridden using the URI syntax typical to other dgenerate URI arguments. You\nmay pass multiple scheduler URIs to this argument, each URI will be tried in turn.", "--second-model-scheduler": "Specify a scheduler (sampler) by URI for the SDXL Refiner or Stable Cascade Decoder pass. Operates\nthe exact same way as --scheduler including the \"help\" option. Passing 'helpargs' will yield a help\nmessage with a list of overridable arguments for each scheduler and their typical defaults. Defaults\nto the value of --scheduler. You may pass multiple scheduler URIs to this argument, each URI will be\ntried in turn.", "--hi-diffusion": "Activate HiDiffusion for the primary model? This can increase the resolution at which the model can\noutput images while retaining quality with no overhead, and possibly improved performance. See:\nhttps://github.com/megvii-research/HiDiffusion This is supported for --model-type torch, torch-sdxl,\nand --torch-kolors.", "--sdxl-refiner-hi-diffusion": "Activate HiDiffusion for the SDXL refiner?, See: --hi-diffusion", "--deep-cache": "Activate DeepCache for the main model? DeepCache caches intermediate attention layer outputs to\nspeed up the diffusion process. Recommended for higher inference steps. See:\nhttps://github.com/horseee/DeepCache This is supported for Stable Diffusion, Stable Diffusion XL,\nStable Diffusion Upscaler X4, Kolors, and Pix2Pix variants.", "--deep-cache-intervals": "Cache interval for DeepCache for the main model. Controls how frequently the attention layers are\ncached during the diffusion process. Lower values cache more frequently, potentially resulting in\nmore speedup but using more memory. This value must be greater than zero. Each value supplied will\nbe tried in turn. Supplying any values implies --deep-cache. This is supported for Stable Diffusion,\nStable Diffusion XL, Stable Diffusion Upscaler X4, Kolors, and Pix2Pix variants. (default: 5)", "--deep-cache-branch-ids": "Branch ID for DeepCache for the main model. Controls which branches of the UNet attention blocks the\ncaching is applied to. Advanced usage only. This value must be greater than or equal to 0. Each\nvalue supplied will be tried in turn. Supplying any values implies --deep-cache. This is supported\nfor Stable Diffusion, Stable Diffusion XL, Stable Diffusion Upscaler X4, Kolors, and Pix2Pix\nvariants. (default: 1)", "--sdxl-refiner-deep-cache": "Activate DeepCache for the SDXL Refiner? See: --deep-cache This is supported for Stable Diffusion XL\nand Kolors based models.", "--sdxl-refiner-deep-cache-intervals": "Cache interval for DeepCache for the SDXL Refiner. Controls how frequently the attention layers are\ncached during the diffusion process. Lower values cache more frequently, potentially resulting in\nmore speedup but using more memory. This value must be greater than zero. Each value supplied will\nbe tried in turn. Supplying any values implies --sdxl-refiner-deep-cache. This is supported for\nStable Diffusion XL and Kolors based models. (default: 5)", "--sdxl-refiner-deep-cache-branch-ids": "Branch ID for DeepCache for the SDXL Refiner. Controls which branches of the UNet attention blocks\nthe caching is applied to. Advanced usage only. This value must be greater than or equal to 0. Each\nvalue supplied will be tried in turn. Supplying any values implies --sdxl-refiner-deep-cache. This\nis supported for Stable Diffusion XL and Kolors based models. (default: 1)", "--tea-cache": "Activate TeaCache for the primary model? This is supported for Flux, TeaCache uses a novel caching\nmechanism in the forward pass of the flux transformer to reduce the amount of computation needed to\ngenerate an image, this can speed up inference with small amounts of quality loss. See:\nhttps://github.com/ali-vilab/TeaCache Also see: --tea-cache-rel-l1-thresholds This is supported for:\n--model-type torch-flux*.", "--tea-cache-rel-l1-thresholds": "TeaCache relative L1 thresholds to try when --tea-cache is enabled. This should be one or more float\nvalues between 0.0 and 1.0, each value will be tried in turn. Higher values mean more speedup.\nDefaults to 0.6 (2.0x speedup). 0.25 for 1.5x speedup, 0.4 for 1.8x speedup, 0.6 for 2.0x speedup,\n0.8 for 2.25x speedup See: https://github.com/ali-vilab/TeaCache Supplying any values implies\n--tea-cache. This is supported for: --model-type torch-flux*. (default: 0.6)", "--ras": "Activate RAS (Region-Adaptive Sampling) for the primary model? This can increase inference speed\nwith SD3. See: https://github.com/microsoft/ras This is supported for: --model-type torch-sd3.", "--ras-index-fusion": "Enable index fusion in RAS (Reinforcement Attention System) for the primary model? This can improve\nattention computation in RAS for SD3 models. Supplying this flag implies --ras. This is supported\nfor: --model-type torch-sd3, (but not for SD3.5 models)", "--ras-sample-ratios": "Average sample ratios for each RAS step. For instance, setting this to 0.5 on a sequence of 4096\ntokens will result in the noise of averagely 2048 tokens to be updated during each RAS step. Must be\nbetween 0.0 and 1.0 (non-inclusive) Each value will be tried in turn. Supplying any values implies\n--ras. This is supported for: --model-type torch-sd3. (default: 0.5)", "--ras-high-ratios": "Ratios of high value tokens to be cached in RAS. Based on the metric selected, the ratio of the high\nvalue chosen to be cached. Must be between 0.0 and 1.0 (non-inclusive) to balance the sample ratio\nbetween the main subject and the background. Each value will be tried in turn. Supplying any values\nimplies --ras. This is supported for: --model-type torch-sd3. (default: 1.0)", "--ras-starvation-scales": "Starvation scales for RAS patch selection. RAS tracks how often a token is dropped and incorporates\nthis count as a scaling factor in the metric for selecting tokens. This scale factor prevents\nexcessive blurring or noise in the final generated image. Larger scaling factor will result in more\nuniform sampling. Must be between 0.0 and 1.0 (non-inclusive) Each value will be tried in turn.\nSupplying any values implies --ras. This is supported for: --model-type torch-sd3. (default: 0.1)", "--ras-error-reset-steps": "Dense sampling steps to reset accumulated error in RAS. The dense sampling steps inserted between\nthe RAS steps to reset the accumulated error. Each argument should be either a single integer or a\ncomma-separated list of integers, e.g. 12 or \"12,22\". Multiple values or comma-separated lists can\nbe provided, and each will be tried in turn. Example: --ras-error-reset-steps 12 \"5,10,15\" Supplying\nany values implies --ras. This is supported for: --model-type torch-sd3. (default: \"12,22\")", "--ras-metrics": "Metrics to try for RAS (Region-Adaptive Sampling). This controls how RAS measures the importance of\ntokens for caching. Valid values are \"std\" (standard deviation) or \"l2norm\" (L2 norm). Each value\nwill be tried in turn. Supplying any values implies --ras. This is supported for: --model-type\ntorch-sd3. (default: \"std\")", "--ras-start-steps": "Starting steps to try for RAS (Region-Adaptive Sampling). This controls when RAS begins applying its\nsampling strategy. Must be greater than or equal to 1. Each value will be tried in turn. Supplying\nany values implies --ras. This is supported for: --model-type torch-sd3. (default: 4)", "--ras-end-steps": "Ending steps to try for RAS (Region-Adaptive Sampling). This controls when RAS stops applying its\nsampling strategy. Must be greater than or equal to 1. Each value will be tried in turn. Supplying\nany values implies --ras. This is supported for: --model-type torch-sd3. (default:\n--inference-steps)", "--ras-skip-num-steps": "Skip steps for RAS (Region-Adaptive Sampling). This controls the number of steps to skip between RAS\nsteps. The actual number of tokens skipped will be rounded down to the nearest multiple of 64 to\nensure efficient memory access patterns for attention computation. When used with\n--ras-skip-num-step-lengths greater than 0, this value will determine how the number of skipped\ntokens changes over time. Positive values will increase the number of skipped tokens over time,\nwhile negative values will decrease it. Each value will be tried in turn. Supplying any values\nimplies --ras. This is supported for: --model-type torch-sd3. (default: 0)", "--ras-skip-num-step-lengths": "Skip step lengths for RAS (Region-Adaptive Sampling). This controls the length of steps to skip\nbetween RAS steps. Must be greater than or equal to 0. When set to 0, static dropping is used where\nthe number of skipped tokens remains constant throughout the generation process. When greater than\n0, dynamic dropping is enabled where the number of skipped tokens varies over time based on\n--ras-skip-num-steps. The pattern of skipping will repeat every --ras-skip-num-step-lengths steps.\nEach value will be tried in turn. Supplying any values implies --ras. This is supported for:\n--model-type torch-sd3. (default: 0)", "--pag": "Use perturbed attention guidance? This is supported for --model-type torch, torch-sdxl, and\ntorch-sd3 for most use cases. This enables PAG for the main model using default scale values.", "--pag-scales": "One or more perturbed attention guidance scales to try. Specifying values enables PAG for the main\nmodel. (default: [3.0])", "--pag-adaptive-scales": "One or more adaptive perturbed attention guidance scales to try. Specifying values enables PAG for\nthe main model. (default: [0.0])", "--sdxl-refiner-pag": "Use perturbed attention guidance in the SDXL refiner? This is supported for --model-type torch-sdxl\nfor most use cases. This enables PAG for the SDXL refiner model using default scale values.", "--sdxl-refiner-pag-scales": "One or more perturbed attention guidance scales to try with the SDXL refiner pass. Specifying values\nenables PAG for the refiner. (default: [3.0])", "--sdxl-refiner-pag-adaptive-scales": "One or more adaptive perturbed attention guidance scales to try with the SDXL refiner pass.\nSpecifying values enables PAG for the refiner. (default: [0.0])", "--model-sequential-offload": "Force sequential model offloading for the main pipeline, this may drastically reduce memory\nconsumption and allow large models to run when they would otherwise not fit in your GPUs VRAM.\nInference will be much slower. Mutually exclusive with --model-cpu-offload", "--model-cpu-offload": "Force model cpu offloading for the main pipeline, this may reduce memory consumption and allow large\nmodels to run when they would otherwise not fit in your GPUs VRAM. Inference will be slower.\nMutually exclusive with --model-sequential-offload", "--second-model-sequential-offload": "Force sequential model offloading for the SDXL Refiner or Stable Cascade Decoder pipeline, this may\ndrastically reduce memory consumption and allow large models to run when they would otherwise not\nfit in your GPUs VRAM. Inference will be much slower. Mutually exclusive with\n--second-model-cpu-offload", "--second-model-cpu-offload": "Force model cpu offloading for the SDXL Refiner or Stable Cascade Decoder pipeline, this may reduce\nmemory consumption and allow large models to run when they would otherwise not fit in your GPUs\nVRAM. Inference will be slower. Mutually exclusive with --second-model-sequential-offload", "--s-cascade-decoder": "Specify a Stable Cascade (torch-s-cascade) decoder model path using a URI. This should be a Hugging\nFace repository slug / blob link, path to model file on disk (for example, a .pt, .pth, .bin, .ckpt,\nor .safetensors file), or model folder containing model files. Optional arguments can be provided\nafter the decoder model specification, these are: \"revision\", \"variant\", \"subfolder\", and \"dtype\".\nThey can be specified as so in any order, they are not positional:\n\"huggingface/decoder_model;revision=main;variant=fp16;subfolder=repo_subfolder;dtype=float16\". The\n\"revision\" argument specifies the model revision to use for the decoder model when loading from\nHugging Face repository, (The Git branch / tag, default is \"main\"). The \"variant\" argument specifies\nthe decoder model variant and defaults to the value of --variant. When \"variant\" is specified when\nloading from a Hugging Face repository or folder, weights will be loaded from \"variant\" filename,\ne.g. \"pytorch_model.<variant>.safetensors. The \"subfolder\" argument specifies the decoder model\nsubfolder, if specified when loading from a Hugging Face repository or folder, weights from the\nspecified subfolder. The \"dtype\" argument specifies the Stable Cascade decoder model precision, it\ndefaults to the value of -t/--dtype and should be one of: auto, bfloat16, float16, or float32. If\nyou wish to load a weights file directly from disk, the simplest way is: --sdxl-refiner\n\"my_decoder.safetensors\" or --sdxl-refiner \"my_decoder.safetensors;dtype=float16\", all other loading\narguments aside from \"dtype\" are unused in this case and may produce an error message if used. If\nyou wish to load a specific weight file from a Hugging Face repository, use the blob link loading\nsyntax: --s-cascade-decoder\n\"https://huggingface.co/UserName/repository-name/blob/main/decoder.safetensors\", the \"revision\"\nargument may be used with this syntax.", "--sdxl-refiner": "Specify a Stable Diffusion XL (torch-sdxl) refiner model path using a URI. This should be a Hugging\nFace repository slug / blob link, path to model file on disk (for example, a .pt, .pth, .bin, .ckpt,\nor .safetensors file), or model folder containing model files. Optional arguments can be provided\nafter the SDXL refiner model specification, these are: \"revision\", \"variant\", \"subfolder\", and\n\"dtype\". They can be specified as so in any order, they are not positional:\n\"huggingface/refiner_model_xl;revision=main;variant=fp16;subfolder=repo_subfolder;dtype=float16\".\nThe \"revision\" argument specifies the model revision to use for the refiner model when loading from\nHugging Face repository, (The Git branch / tag, default is \"main\"). The \"variant\" argument specifies\nthe SDXL refiner model variant and defaults to the value of --variant. When \"variant\" is specified\nwhen loading from a Hugging Face repository or folder, weights will be loaded from \"variant\"\nfilename, e.g. \"pytorch_model.<variant>.safetensors. The \"subfolder\" argument specifies the SDXL\nrefiner model subfolder, if specified when loading from a Hugging Face repository or folder, weights\nfrom the specified subfolder. The \"dtype\" argument specifies the SDXL refiner model precision, it\ndefaults to the value of -t/--dtype and should be one of: auto, bfloat16, float16, or float32. If\nyou wish to load a weights file directly from disk, the simplest way is: --sdxl-refiner\n\"my_sdxl_refiner.safetensors\" or --sdxl-refiner \"my_sdxl_refiner.safetensors;dtype=float16\", all\nother loading arguments aside from \"dtype\" are unused in this case and may produce an error message\nif used. If you wish to load a specific weight file from a Hugging Face repository, use the blob\nlink loading syntax: --sdxl-refiner\n\"https://huggingface.co/UserName/repository-name/blob/main/refiner_model.safetensors\", the\n\"revision\" argument may be used with this syntax.", "--sdxl-refiner-edit": "Force the SDXL refiner to operate in edit mode instead of cooperative denoising mode as it would\nnormally do for inpainting and ControlNet usage. The main model will perform the full amount of\ninference steps requested by --inference-steps. The output of the main model will be passed to the\nrefiner model and processed with an image seed strength in img2img mode determined by (1.0 -\nhigh-noise-fraction)", "--sdxl-t2i-adapter-factors": "One or more SDXL specific T2I adapter factors to try, this controls the amount of time-steps for\nwhich a T2I adapter applies guidance to an image, this is a value between 0.0 and 1.0. A value of\n0.5 for example indicates that the T2I adapter is only active for half the amount of time-steps it\ntakes to completely render an image.", "--sdxl-aesthetic-scores": "One or more Stable Diffusion XL (torch-sdxl) \"aesthetic-score\" micro-conditioning parameters. Used\nto simulate an aesthetic score of the generated image by influencing the positive text condition.\nPart of SDXL's micro-conditioning as explained in section 2.2 of\n[https://huggingface.co/papers/2307.01952].", "--sdxl-crops-coords-top-left": "One or more Stable Diffusion XL (torch-sdxl) \"negative-crops-coords-top-left\" micro-conditioning\nparameters in the format \"0,0\". --sdxl-crops-coords-top-left can be used to generate an image that\nappears to be \"cropped\" from the position --sdxl-crops-coords-top-left downwards. Favorable,\nwell-centered images are usually achieved by setting --sdxl-crops-coords-top-left to \"0,0\". Part of\nSDXL's micro-conditioning as explained in section 2.2 of [https://huggingface.co/papers/2307.01952].", "--sdxl-original-sizes": "One or more Stable Diffusion XL (torch-sdxl) \"original-size\" micro-conditioning parameters in the\nformat (WIDTH)x(HEIGHT). If not the same as --sdxl-target-size the image will appear to be down or\nup-sampled. --sdxl-original-size defaults to --output-size or the size of any input images if not\nspecified. Part of SDXL's micro-conditioning as explained in section 2.2 of\n[https://huggingface.co/papers/2307.01952]", "--sdxl-target-sizes": "One or more Stable Diffusion XL (torch-sdxl) \"target-size\" micro-conditioning parameters in the\nformat (WIDTH)x(HEIGHT). For most cases, --sdxl-target-size should be set to the desired height and\nwidth of the generated image. If not specified it will default to --output-size or the size of any\ninput images. Part of SDXL's micro-conditioning as explained in section 2.2 of\n[https://huggingface.co/papers/2307.01952]", "--sdxl-negative-aesthetic-scores": "One or more Stable Diffusion XL (torch-sdxl) \"negative-aesthetic-score\" micro-conditioning\nparameters. Part of SDXL's micro-conditioning as explained in section 2.2 of\n[https://huggingface.co/papers/2307.01952]. Can be used to simulate an aesthetic score of the\ngenerated image by influencing the negative text condition.", "--sdxl-negative-original-sizes": "One or more Stable Diffusion XL (torch-sdxl) \"negative-original-sizes\" micro-conditioning\nparameters. Negatively condition the generation process based on a specific image resolution. Part\nof SDXL's micro-conditioning as explained in section 2.2 of\n[https://huggingface.co/papers/2307.01952]. For more information, refer to this issue thread:\nhttps://github.com/huggingface/diffusers/issues/4208", "--sdxl-negative-target-sizes": "One or more Stable Diffusion XL (torch-sdxl) \"negative-original-sizes\" micro-conditioning\nparameters. To negatively condition the generation process based on a target image resolution. It\nshould be as same as the \"--sdxl-target-size\" for most cases. Part of SDXL's micro-conditioning as\nexplained in section 2.2 of [https://huggingface.co/papers/2307.01952]. For more information, refer\nto this issue thread: https://github.com/huggingface/diffusers/issues/4208.", "--sdxl-negative-crops-coords-top-left": "One or more Stable Diffusion XL (torch-sdxl) \"negative-crops-coords-top-left\" micro-conditioning\nparameters in the format \"0,0\". Negatively condition the generation process based on a specific crop\ncoordinates. Part of SDXL's micro-conditioning as explained in section 2.2 of\n[https://huggingface.co/papers/2307.01952]. For more information, refer to this issue thread:\nhttps://github.com/huggingface/diffusers/issues/4208.", "--sdxl-refiner-aesthetic-scores": "See: --sdxl-aesthetic-scores, applied to SDXL refiner pass.", "--sdxl-refiner-crops-coords-top-left": "See: --sdxl-crops-coords-top-left, applied to SDXL refiner pass.", "--sdxl-refiner-original-sizes": "See: --sdxl-refiner-original-sizes, applied to SDXL refiner pass.", "--sdxl-refiner-target-sizes": "See: --sdxl-refiner-target-sizes, applied to SDXL refiner pass.", "--sdxl-refiner-negative-aesthetic-scores": "See: --sdxl-negative-aesthetic-scores, applied to SDXL refiner pass.", "--sdxl-refiner-negative-original-sizes": "See: --sdxl-negative-original-sizes, applied to SDXL refiner pass.", "--sdxl-refiner-negative-target-sizes": "See: --sdxl-negative-target-sizes, applied to SDXL refiner pass.", "--sdxl-refiner-negative-crops-coords-top-left": "See: --sdxl-negative-crops-coords-top-left, applied to SDXL refiner pass.", "--sdxl-high-noise-fractions": "One or more high-noise-fraction values for Stable Diffusion XL (torch-sdxl), this fraction of\ninference steps will be processed by the base model, while the rest will be processed by the refiner\nmodel. Multiple values to this argument will result in additional generation steps for each value.\nIn certain situations when collaborative denoising is not supported, such as when using\n--control-nets and inpainting with SDXL, the inverse proportion of this value IE: (1.0 -\nhigh-noise-fraction) becomes the --image-seed-strengths input to the SDXL refiner in plain img2img\nmode. Edit mode may be forced with the option --sdxl-refiner-edit (default: [0.8])", "--sdxl-refiner-guidance-rescales": "One or more guidance rescale values for the SDXL refiner when in use. Override the guidance rescale\nvalue used by the SDXL refiner, which defaults to the value taken from --guidance-rescales.", "--safety-checker": "Enable safety checker loading, this is off by default. When turned on images with NSFW content\ndetected may result in solid black output. Some pretrained models have no safety checker model\npresent, in that case this option has no effect.", "--device": "cuda / cpu, or other device supported by torch, for example mps on MacOS. (default: cuda, mps on\nMacOS). Use: cuda:0, cuda:1, cuda:2, etc. to specify a specific cuda supporting GPU.", "--dtype": "Model precision: auto, bfloat16, float16, or float32. (default: auto)", "--output-size": "Image output size, for txt2img generation this is the exact output size. The dimensions specified\nfor this value must be aligned by 8 or you will receive an error message. If an --image-seeds URI is\nused its Seed, Mask, and/or Control component image sources will be resized to this dimension with\naspect ratio maintained before being used for generation by default, except in the case of Stable\nCascade where the images are used as a style prompt (not a noised seed), and can be of varying\ndimensions. If --no-aspect is not specified, width will be fixed and a new height (aligned by 8)\nwill be calculated for the input images. In most cases resizing the image inputs will result in an\nimage output of an equal size to the inputs, except for upscalers and Deep Floyd --model-type values\n(torch-if*). If only one integer value is provided, that is the value for both dimensions. X/Y\ndimension values should be separated by \"x\". This value defaults to 512x512 for Stable Diffusion\nwhen no --image-seeds are specified (IE txt2img mode), 1024x1024 for Stable Cascade and Stable\nDiffusion 3/XL or Flux model types, and 64x64 for --model-type torch-if (Deep Floyd stage 1). Deep\nFloyd stage 1 images passed to superscaler models (--model-type torch-ifs*) that are specified with\nthe 'floyd' keyword argument in an --image-seeds definition are never resized or processed in any\nway.", "--no-aspect": "This option disables aspect correct resizing of images provided to --image-seeds globally. Seed,\nMask, and Control guidance images will be resized to the closest dimension specified by\n--output-size that is aligned by 8 pixels with no consideration of the source aspect ratio. This can\nbe overriden at the --image-seeds level with the image seed keyword argument 'aspect=true/false'.", "--output-path": "Output path for generated images and files. This directory will be created if it does not exist.\n(default: ./output)", "--output-prefix": "Name prefix for generated images and files. This prefix will be added to the beginning of every\ngenerated file, followed by an underscore.", "--output-overwrite": "Enable overwrites of files in the output directory that already exists. The default behavior is not\nto do this, and instead append a filename suffix: \"_duplicate_(number)\" when it is detected that the\ngenerated file name already exists.", "--output-configs": "Write a configuration text file for every output image or animation. The text file can be used\nreproduce that particular output image or animation by piping it to dgenerate STDIN or by using the\n--file option, for example \"dgenerate < config.dgen\" or \"dgenerate --file config.dgen\". These files\nwill be written to --output-path and are affected by --output-prefix and --output-overwrite as well.\nThe files will be named after their corresponding image or animation file. Configuration files\nproduced for animation frame images will utilize --frame-start and --frame-end to specify the frame\nnumber.", "--output-metadata": "Write the information produced by --output-configs to the image metadata of each image. Metadata\nwill not be written to animated files. For PNGs, the data is written to a PNG metadata property\nnamed \"DgenerateConfig\" and can be read using ImageMagick like so: \"magick identify -format\n\"%%[Property:DgenerateConfig] generated_file.png\". For JPEGs, the data is written to the EXIF\nUserComment on the image. Only PNGs and JPEGs are supported for metadata writing, see:\n--image-format", "--output-auto1111-metadata": "Write Automatic1111 compatible metadata to the image metadata of each image, this includes hashes\nfor single file model checkpoints. Metadata will not be written to animated files. For PNGs, the\ndata is written to a PNG metadata property named \"parameters\". For JPEGs, the data is written to the\nEXIF UserComment on the image. Only PNGs and JPEGs are supported for metadata writing, see:\n--image-format", "--prompt-weighter": "Specify a prompt weighter implementation by URI, for example: --prompt-weighter compel, or\n--prompt-weighter sd-embed. By default, no prompt weighting syntax is enabled, meaning that you\ncannot adjust token weights as you may be able to do in software such as ComfyUI, Automatic1111,\nCivitAI etc. And in some cases the length of your prompt is limited. Prompt weighters support these\nspecial token weighting syntaxes and long prompts, currently there are two implementations \"compel\"\nand \"sd-embed\". See: --prompt-weighter-help for a list of implementation names. You may also use\n--prompt-weighter-help \"name\" to see comprehensive documentation for a specific prompt weighter\nimplementation.", "--second-model-prompt-weighter": "--prompt-weighter URI value that that applies to to --sdxl-refiner or --s-cascade-decoder.", "--prompt-weighter-help": "Use this option alone (or with --plugin-modules) and no model specification in order to list\navailable prompt weighter names. Specifying one or more prompt weighter names after this option will\ncause usage documentation for the specified prompt weighters to be printed. When used with\n--plugin-modules, prompt weighters implemented by the specified plugins will also be listed.", "--prompt-upscaler": "Specify a prompt upscaler implementation by URI, for example: --prompt-weighter dynamicprompts.\nPrompt upscaler plugins can preform pure text processing and expansion on incoming prompt text,\npossibly resulting in more generation steps (variations) if the prompt upscaler returns multiple\nprompts per input prompt. You may specify multiple upscaler URIs and they will be chained together\nsequentially.", "--second-model-prompt-upscaler": "Specify a --prompt-upscaler URI that will affect --second-model-prompts only, by default the prompt\nupscaler specified by --prompt-upscaler will be used.", "--second-model-second-prompt-upscaler": "Specify a --prompt-upscaler URI that will affect --second-model-second-prompts only, by default the\nprompt upscaler specified by --prompt-upscaler will be used.", "--second-prompt-upscaler": "Specify a --prompt-upscaler URI that will affect --second-prompts only, by default the prompt\nupscaler specified by --prompt-upscaler will be used.", "--third-prompt-upscaler": "Specify a --prompt-upscaler URI that will affect --third-prompts only, by default the prompt\nupscaler specified by --prompt-upscaler will be used.", "--prompt-upscaler-help": "Use this option alone (or with --plugin-modules) and no model specification in order to list\navailable prompt upscaler names. Specifying one or more prompt upscaler names after this option will\ncause usage documentation for the specified prompt upscalers to be printed. When used with\n--plugin-modules, prompt upscalers implemented by the specified plugins will also be listed.", "--prompts": "One or more prompts to try, an image group is generated for each prompt, prompt data is split by ;\n(semi-colon). The first value is the positive text influence, things you want to see. The Second\nvalue is negative influence IE. things you don't want to see. Example: --prompts \"photo of a horse\nin a field; artwork, painting, rain\". (default: [(empty string)])", "--second-prompts": "One or more secondary prompts to try using the torch-sdxl (SDXL), torch-sd3 (Stable Diffusion 3) or\ntorch-flux (Flux) secondary text encoder. By default the model is passed the primary prompt for this\nvalue, this option allows you to choose a different prompt. The negative prompt component can be\nspecified with the same syntax as --prompts", "--third-prompts": "One or more tertiary prompts to try using the torch-sd3 (Stable Diffusion 3) tertiary (T5) text\nencoder, Flux does not support this argument. By default the model is passed the primary prompt for\nthis value, this option allows you to choose a different prompt. The negative prompt component can\nbe specified with the same syntax as --prompts", "--second-model-prompts": "One or more prompts to try with the SDXL Refiner or Stable Cascade decoder model, by default the\ndecoder model gets the primary prompt, this argument overrides that with a prompt of your choosing.\nThe negative prompt component can be specified with the same syntax as --prompts", "--second-model-second-prompts": "One or more prompts to try with the SDXL refiner models secondary text encoder (Stable Cascade\nDecoder is not supported), by default the SDXL refiner model gets the primary prompt passed to its\nsecond text encoder, this argument overrides that with a prompt of your choosing. The negative\nprompt component can be specified with the same syntax as --prompts", "--max-sequence-length": "The maximum amount of prompt tokens that the T5EncoderModel (third text encoder) of Stable Diffusion\n3 or Flux can handle. This should be an integer value between 1 and 512 inclusive. The higher the\nvalue the more resources and time are required for processing. (default: 256 for SD3, 512 for Flux)", "--clip-skips": "One or more clip skip values to try. Clip skip is the number of layers to be skipped from CLIP while\ncomputing the prompt embeddings, it must be a value greater than or equal to zero. A value of 1\nmeans that the output of the pre-final layer will be used for computing the prompt embeddings. This\nis only supported for --model-type values \"torch\", \"torch-sdxl\", and \"torch-sd3\".", "--seeds": "One or more seeds to try, define fixed seeds to achieve deterministic output. This argument may not\nbe used when --gse/--gen-seeds is used. (default: [randint(0, 99999999999999)])", "--seeds-to-images": "When this option is enabled, each provided --seeds value or value generated by --gen-seeds is used\nfor the corresponding image input given by --image-seeds. If the amount of --seeds given is not\nidentical to that of the amount of --image-seeds given, the seed is determined as: seed =\nseeds[image_seed_index %% len(seeds)], IE: it wraps around.", "--gen-seeds": "Auto generate N random seeds to try. This argument may not be used when -se/--seeds is used.", "--animation-format": "Output format when generating an animation from an input video / gif / webp etc. Value must be one\nof: mp4, png, apng, gif, or webp. You may also specify \"frames\" to indicate that only frames should\nbe output and no coalesced animation file should be rendered. (default: mp4)", "--image-format": "Output format when writing static images. Any selection other than \"png\", \"jpg\", or \"jpeg\" is not\ncompatible with --output-metadata. Value must be one of: png, apng, blp, bmp, dib, bufr, pcx, dds,\nps, eps, gif, grib, h5, hdf, jp2, j2k, jpc, jpf, jpx, j2c, icns, ico, im, jfif, jpe, jpg, jpeg, tif,\ntiff, mpo, msp, palm, pdf, pbm, pgm, ppm, pnm, pfm, bw, rgb, rgba, sgi, tga, icb, vda, vst, webp,\nwmf, emf, or xbm. (default: png)", "--no-frames": "Do not write frame images individually when rendering an animation, only write the animation file.\nThis option is incompatible with --animation-format frames.", "--frame-start": "Starting frame slice point for animated files (zero-indexed), the specified frame will be included.\n(default: 0)", "--frame-end": "Ending frame slice point for animated files (zero-indexed), the specified frame will be included.", "--image-seeds": "One or more image seed URIs to process, these may consist of URLs or file paths. Videos / GIFs /\nWEBP files will result in frames being rendered as well as an animated output file being generated\nif more than one frame is available in the input file. Inpainting for static images can be achieved\nby specifying a black and white mask image in each image seed string using a semicolon as the\nseparating character, like so: \"my-seed-image.png;my-image-mask.png\", white areas of the mask\nindicate where generated content is to be placed in your seed image. Output dimensions specific to\nthe image seed can be specified by placing the dimension at the end of the string following a\nsemicolon like so: \"my-seed-image.png;512x512\" or \"my-seed-image.png;my-image-mask.png;512x512\".\nWhen using --control-nets, a singular image specification is interpreted as the control guidance\nimage, and you can specify multiple control image sources by separating them with commas in the case\nwhere multiple ControlNets are specified, IE: (--image-seeds \"control-image1.png,\ncontrol-image2.png\") OR (--image-seeds \"seed.png;control=control-image1.png, control-image2.png\").\nUsing --control-nets with img2img or inpainting can be accomplished with the syntax:\n\"my-seed-image.png;mask=my-image-mask.png;control=my-control-image.png;resize=512x512\". The \"mask\"\nand \"resize\" arguments are optional when using --control-nets. Videos, GIFs, and WEBP are also\nsupported as inputs when using --control-nets, even for the \"control\" argument. --image-seeds is\ncapable of reading from multiple animated files at once or any combination of animated files and\nimages, the animated file with the least amount of frames dictates how many frames are generated and\nstatic images are duplicated over the total amount of frames. The keyword argument \"aspect\" can be\nused to determine resizing behavior when the global argument --output-size or the local keyword\nargument \"resize\" is specified, it is a boolean argument indicating whether aspect ratio of the\ninput image should be respected or ignored. The keyword argument \"floyd\" can be used to specify\nimages from a previous deep floyd stage when using --model-type torch-ifs*. When keyword arguments\nare present, all applicable images such as \"mask\", \"control\", etc. must also be defined with keyword\narguments instead of with the short syntax.", "--seed-image-processors": "Specify one or more image processor actions to perform on the primary image(s) specified by\n--image-seeds. For example: --seed-image-processors \"flip\" \"mirror\" \"grayscale\". To obtain more\ninformation about what image processors are available and how to use them, see:\n--image-processor-help. If you have multiple images specified for batching, for example\n(--image-seeds \"images: img2img-1.png, img2img-2.png\"), you may use the delimiter \"+\" to separate\nimage processor chains, so that a certain chain affects a certain seed image, the plus symbol may\nalso be used to represent a null processor. For example: (--seed-image-processors affect-img-1 +\naffect-img-2), or (--seed-image-processors + affect-img-2), or (--seed-image-processors affect-img-1\n+). The amount of processors / processor chains must not exceed the amount of input images, or you\nwill receive a syntax error message. To obtain more information about what image processors are\navailable and how to use them, see: --image-processor-help.", "--mask-image-processors": "Specify one or more image processor actions to perform on the inpaint mask image(s) specified by\n--image-seeds. For example: --mask-image-processors \"invert\". To obtain more information about what\nimage processors are available and how to use them, see: --image-processor-help. If you have\nmultiple masks specified for batching, for example --image-seeds (\"images: img2img-1.png,\nimg2img-2.png; mask-1.png, mask-2.png\"), you may use the delimiter \"+\" to separate image processor\nchains, so that a certain chain affects a certain mask image, the plus symbol may also be used to\nrepresent a null processor. For example: (--mask-image-processors affect-mask-1 + affect-mask-2), or\n(--mask-image-processors + affect-mask-2), or (--mask-image-processors affect-mask-1 +). The amount\nof processors / processor chains must not exceed the amount of input mask images, or you will\nreceive a syntax error message. To obtain more information about what image processors are available\nand how to use them, see: --image-processor-help.", "--control-image-processors": "Specify one or more image processor actions to perform on the control image specified by\n--image-seeds, this option is meant to be used with --control-nets. Example:\n--control-image-processors \"canny;lower=50;upper=100\". The delimiter \"+\" can be used to specify a\ndifferent processor group for each image when using multiple control images with --control-nets. For\nexample if you have --image-seeds \"img1.png, img2.png\" or --image-seeds \"...;control=img1.png,\nimg2.png\" specified and multiple ControlNet models specified with --control-nets, you can specify\nprocessors for those control images with the syntax: (--control-image-processors \"processes-img1\" +\n\"processes-img2\"). This syntax also supports chaining of processors, for example:\n(--control-image-processors \"first-process-img1\" \"second-process-img1\" + \"process-img2\"). The amount\nof specified processors must not exceed the amount of specified control images, or you will receive\na syntax error message. Images which do not have a processor defined for them will not be processed,\nand the plus character can be used to indicate an image is not to be processed and instead skipped\nover when that image is a leading element, for example (--control-image-processors +\n\"process-second\") would indicate that the first control guidance image is not to be processed, only\nthe second. To obtain more information about what image processors are available and how to use\nthem, see: --image-processor-help.", "--image-processor-help": "Use this option alone (or with --plugin-modules) and no model specification in order to list\navailable image processor names. Specifying one or more image processor names after this option will\ncause usage documentation for the specified image processors to be printed. When used with\n--plugin-modules, image processors implemented by the specified plugins will also be listed.", "--post-processors": "Specify one or more image processor actions to perform on generated output before it is saved. For\nexample: --post-processors \"upcaler;model=4x_ESRGAN.pth\". To obtain more information about what\nprocessors are available and how to use them, see: --image-processor-help.", "--image-seed-strengths": "One or more image strength values to try when using --image-seeds for img2img or inpaint mode.\nCloser to 0 means high usage of the seed image (less noise convolution), 1 effectively means no\nusage (high noise convolution). Low values will produce something closer or more relevant to the\ninput image, high values will give the AI more creative freedom. This value must be greater than 0\nand less than or equal to 1. (default: [0.8])", "--upscaler-noise-levels": "One or more upscaler noise level values to try when using the super resolution upscaler --model-type\ntorch-upscaler-x4 or torch-ifs. Specifying this option for --model-type torch-upscaler-x2 will\nproduce an error message. The higher this value the more noise is added to the image before\nupscaling (similar to --image-seed-strengths). (default: [20 for x4, 250 for\ntorch-ifs/torch-ifs-img2img, 0 for torch-ifs inpainting mode])", "--guidance-scales": "One or more guidance scale values to try. Guidance scale effects how much your text prompt is\nconsidered. Low values draw more data from images unrelated to text prompt. (default: [5])", "--sigmas": "One or more comma-separated lists (or singular values) of floating point sigmas to try. This is\nsupported when using a --scheduler that supports setting sigmas. Sigma values control the noise\nschedule in the diffusion process, allowing for fine-grained control over how noise is added and\nremoved during image generation. Example: --sigmas \"1.0,0.8,0.6,0.4,0.2\" Or expressions: \"expr:\nsigmas * .95\", sigmas from --scheduler are represented as a numpy array in an interpreted\nexpression, numpy is available through the namespace \"np\", this uses asteval. Or singular values:\n--sigmas 0.4 Expressions and CSV lists can be intermixed: --sigmas \"1.0,...\" \"expr: sigmas * 0.95\"\nEach provided value (each quoted string in the example above) will be tried in turn.", "--image-guidance-scales": "One or more image guidance scale values to try. This can push the generated image towards the\ninitial image when using --model-type *-pix2pix models, it is unsupported for other model types. Use\nin conjunction with --image-seeds, inpainting (masks) and --control-nets are not supported. Image\nguidance scale is enabled by setting image-guidance-scale > 1. Higher image guidance scale\nencourages generated images that are closely linked to the source image, usually at the expense of\nlower image quality. Requires a value of at least 1. (default: [1.5])", "--guidance-rescales": "One or more guidance rescale factors to try. Proposed by [Common Diffusion Noise Schedules and\nSample Steps are Flawed](https://arxiv.org/pdf/2305.08891.pdf) \"guidance_scale\" is defined as \"\u03c6\" in\nequation 16. of [Common Diffusion Noise Schedules and Sample Steps are Flawed]\n(https://arxiv.org/pdf/2305.08891.pdf). Guidance rescale factor should fix overexposure when using\nzero terminal SNR. This is supported for basic text to image generation when using --model-type\n\"torch\" but not inpainting, img2img, or --control-nets. When using --model-type \"torch-sdxl\" it is\nsupported for basic generation, inpainting, and img2img, unless --control-nets is specified in which\ncase only inpainting is supported. It is supported for --model-type \"torch-sdxl-pix2pix\" but not\n--model-type \"torch-pix2pix\". (default: [0.0])", "--inference-steps": "One or more inference steps values to try. The amount of inference (de-noising) steps effects image\nclarity to a degree, higher values bring the image closer to what the AI is targeting for the\ncontent of the image. Values between 30-40 produce good results, higher values may improve image\nquality and or change image content. (default: [30])", "--second-model-inference-steps": "One or more inference steps values for the SDXL refiner or Stable Cascade decoder when in use.\nOverride the number of inference steps used by the second model, which defaults to the value taken\nfrom --inference-steps for SDXL and 10 for Stable Cascade.", "--second-model-guidance-scales": "One or more inference steps values for the SDXL refiner or Stable Cascade decoder when in use.\nOverride the guidance scale value used by the second model, which defaults to the value taken from\n--guidance-scales for SDXL and 0 for Stable Cascade.", "--sdxl-refiner-sigmas": "See: --sigmas, but for the SDXL Refiner."}
{"abs": "abs(args, kwargs):\n\n    Return the absolute value of the argument.\n\n==============================================", "align_size": "align_size(size: str | tuple, align: int, format_size: bool = True) -> str | tuple:\n\n    Align a string dimension such as \"700x700\", or a tuple dimension such as (700, 700) to a\n    specific alignment value (\"align\") and format the result to a string dimension recognized by\n    dgenerate.\n\n    This function expects a string with the format WIDTHxHEIGHT, or just WIDTH, or a tuple of\n    dimensions.\n\n    It returns a string in the same format with the dimension aligned to the specified amount,\n    unless \"format_size\" is False, in which case it will return a tuple.\n\n================================================================================================", "all": "all(args, kwargs):\n\n    Return True if bool(x) is True for all values x in the iterable.\n\n    If the iterable is empty, return True.\n\n====================================================================", "any": "any(args, kwargs):\n\n    Return True if bool(x) is True for any x in the iterable.\n\n    If the iterable is empty, return False.\n\n=============================================================", "ascii": "ascii(args, kwargs):\n\n    Return an ASCII-only representation of an object.\n\n    As repr(), return a string containing a printable representation of an object, but escape the\n    non-ASCII characters in the string returned by repr() using \\\\x, \\\\u or \\\\U escapes. This\n    generates a string similar to that returned by repr() in Python 2.\n\n=================================================================================================", "bin": "bin(args, kwargs):\n\n    Return the binary representation of an integer.\n\n    >>> bin(2796202) '0b1010101010101010101010'\n\n===================================================", "bool": "bool(args, kwargs):\n\n    Returns True when the argument is true, False otherwise. The builtins True and False are the\n    only two instances of the class bool. The class bool is a subclass of the class int, and cannot\n    be subclassed.\n\n===================================================================================================", "bytearray": "bytearray(args, kwargs):\n\n    bytearray(iterable_of_ints) -> bytearray bytearray(string, encoding[, errors]) -> bytearray\n    bytearray(bytes_or_buffer) -> mutable copy of bytes_or_buffer bytearray(int) -> bytes array of\n    size given by the parameter initialized with null bytes bytearray() -> empty bytes array\n\n    Construct a mutable bytearray object from:   - an iterable yielding integers in range(256)   - a\n    text string encoded using the specified encoding   - a bytes or a buffer object   - any object\n    implementing the buffer API.   - an integer\n\n====================================================================================================", "bytes": "bytes(args, kwargs):\n\n    bytes(iterable_of_ints) -> bytes bytes(string, encoding[, errors]) -> bytes\n    bytes(bytes_or_buffer) -> immutable copy of bytes_or_buffer bytes(int) -> bytes object of size\n    given by the parameter initialized with null bytes bytes() -> empty bytes object\n\n    Construct an immutable array of bytes from:   - an iterable yielding integers in range(256)   -\n    a text string encoded using the specified encoding   - any object implementing the buffer API.\n    - an integer\n\n===================================================================================================", "callable": "callable(args, kwargs):\n\n    Return whether the object is callable (i.e., some kind of function).\n\n    Note that classes are callable, as are instances of classes with a __call__() method.\n\n=========================================================================================", "chr": "chr(args, kwargs):\n\n    Return a Unicode string of one character with ordinal i; 0 <= i <= 0x10ffff.\n\n================================================================================", "complex": "complex(args, kwargs):\n\n    Create a complex number from a string or numbers.\n\n    If a string is given, parse it as a complex number. If a single number is given, convert it to a\n    complex number. If the 'real' or 'imag' arguments are given, create a complex number with the\n    specified real and imaginary components.\n\n====================================================================================================", "csv": "csv(iterable: typing.Iterable):\n\n    Convert an iterable into a CSV formatted string.\n\n====================================================", "cwd": "cwd() -> str:\n\n    Return the current working directory as a string.\n\n=====================================================", "default_device": "default_device() -> str:\n\n    Return the name of the default accelerator device on the system.\n\n====================================================================", "dict": "dict(args, kwargs):\n\n    dict() -> new empty dictionary dict(mapping) -> new dictionary initialized from a mapping\n    object's     (key, value) pairs dict(iterable) -> new dictionary initialized as if via:     d =\n    {}     for k, v in iterable:         d[k] = v dict(**kwargs) -> new dictionary initialized with\n    the name=value pairs     in the keyword argument list.  For example:  dict(one=1, two=2)\n\n===================================================================================================", "divmod": "divmod(args, kwargs):\n\n    Return the tuple (x//y, x%y).  Invariant: div*y + mod == x.\n\n===============================================================", "download": "download(url: str, output: str | None = None, overwrite: bool = False, text: bool = False) -> str:\n\n    Download a file from a URL to the web cache or a specified path, and return the file path to the\n    downloaded file.\n\n    \\set my_variable {{ download('https://modelhost.com/model.safetensors' }}\n\n    \\set my_variable {{ download('https://modelhost.com/model.safetensors', output='model.safetensors') }}\n\n    \\set my_variable {{ download('https://modelhost.com/model.safetensors', output='directory/' }}\n\n    \\setp my_variable download('https://modelhost.com/model.safetensors')\n\n    When an \"output\" path is specified, if the file already exists it will be reused by default\n    (simple caching behavior), this can be disabled with the argument \"overwrite=True\" indicating\n    that the file should always be downloaded.\n\n    \"overwrite=True\" can also be used to overwrite cached files in the dgenerate web cache.\n\n    An error will be raised by default if a text mimetype is encountered, this can be overridden\n    with \"text=True\"\n\n    Be weary that if you have a long-running loop in your config using a top level jinja template,\n    which refers to your template variable, cache expiry may invalidate the file stored in your\n    variable.\n\n    You can rectify this by using the template function inside your loop.\n\n==========================================================================================================", "enumerate": "enumerate(args, kwargs):\n\n    Return an enumerate object.\n\n      iterable     an object supporting iteration\n\n    The enumerate object yields pairs containing a count (from start, which defaults to zero) and a\n    value yielded by the iterable argument.\n\n    enumerate is useful for obtaining an indexed list:     (0, seq[0]), (1, seq[1]), (2, seq[2]),\n    ...\n\n===================================================================================================", "filter": "filter(args, kwargs):\n\n    Return an iterator yielding those items of iterable for which function(item) is true. If\n    function is None, return the items that are true.\n\n============================================================================================", "first": "first(iterable: collections.abc.Iterable[typing.Any]) -> typing.Any:\n\n    Return the first element in an iterable collection.\n\n=======================================================", "float": "float(args, kwargs):\n\n    Convert a string or number to a floating-point number, if possible.\n\n=======================================================================", "format": "format(args, kwargs):\n\n    Return type(value).__format__(value, format_spec)\n\n    Many built-in types implement format_spec according to the Format Specification Mini-language.\n    See help('FORMATTING').\n\n    If type(value) does not supply a method named __format__ and format_spec is empty, then\n    str(value) is returned. See also help('SPECIALMETHODS').\n\n==================================================================================================", "format_dtype": "format_dtype(dtype: <enum 'DataType'>) -> str:\n\n    Return the string representation of a DataType enum. This can be used to get command line\n    compatible --dtype string from the last_dtype template variable.\n\n=============================================================================================", "format_model_type": "format_model_type(model_type: <enum 'ModelType'>) -> str:\n\n    Return the string representation of a ModelType enum. This can be used to get command line\n    compatible --model-type string from the last_model_type template variable.\n\n==============================================================================================", "format_prompt": "format_prompt(prompts: dgenerate.prompt.Prompt | collections.abc.Iterable[dgenerate.prompt.Prompt]) -> str:\n\n    Format a prompt object, or a list of prompt objects, into quoted string(s)\n\n==============================================================================", "format_size": "format_size(size: collections.abc.Iterable[int]) -> str:\n\n    Join an iterable of integers into a string seperated by the character 'x', for example (512,\n    512) -> \"512x512\"\n\n================================================================================================", "frange": "frange(start, stop = None, step = 0.1):\n\n    Like range, but for floating point numbers.\n\n    The default step value is 0.1\n\n===============================================", "frozenset": "frozenset(args, kwargs):\n\n    Build an immutable unordered collection of unique elements.\n\n===============================================================", "gen_seeds": "gen_seeds(n: int) -> list[str]:\n\n    Generate N random integer seeds (as strings) and return a list of them.\n\n===========================================================================", "getattr": "getattr(args, kwargs):\n\n    getattr(object, name[, default]) -> value\n\n    Get a named attribute from an object; getattr(x, 'y') is equivalent to x.y. When a default\n    argument is given, it is returned when the attribute doesn't exist; without it, an exception is\n    raised in that case.\n\n===================================================================================================", "hasattr": "hasattr(args, kwargs):\n\n    Return whether the object has an attribute with the given name.\n\n    This is done by calling getattr(obj, name) and catching AttributeError.\n\n===========================================================================", "hash": "hash(args, kwargs):\n\n    Return the hash value for the given object.\n\n    Two objects that compare equal must also have the same hash value, but the reverse is not\n    necessarily true.\n\n=============================================================================================", "have_cuda": "have_cuda() -> bool:\n\n    Check if CUDA backend is available.\n\n=======================================", "have_feature": "have_feature(feature_name: str) -> bool:\n\n    Return a boolean value indicating if dgenerate has a specific feature available.\n\n    Currently accepted values are:\n\n    \"ncnn\": Do we have ncnn installed?\n    \"gpt4all\": Do we have gpt4all installed?\n    \"bitsandbytes\": Do we have bitsandbytes installed?\n    \"flash-attn\": Do we have flash-attn installed?\n    \"xformers\": Do we have xformers installed?\n    \"triton\": Do we have triton installed?\n\n====================================================================================", "have_mps": "have_mps() -> bool:\n\n    Check if MPS backend is available.\n\n======================================", "have_xpu": "have_xpu() -> bool:\n\n    Check if XPU backend is available.\n\n======================================", "hex": "hex(args, kwargs):\n\n    Return the hexadecimal representation of an integer.\n\n    >>> hex(12648430) '0xc0ffee'\n\n========================================================", "image_size": "image_size(file: str, format_size: bool = True) -> str | tuple[int, int]:\n\n    Return the width and height of an image file on disk.\n\n    If \"format_size\" is False, return a tuple instead of a WIDTHxHEIGHT string.\n\n===============================================================================", "import_module": "import_module(module_name: str) -> typing.Any:\n\n    Import a Python module by name and return the module object.\n\n    If the module cannot be imported, an error will be raised.\n\n    See also the directive: \\import\n\n================================================================", "int": "int(args, kwargs):\n\n    int([x]) -> integer int(x, base=10) -> integer\n\n    Convert a number or string to an integer, or return 0 if no arguments are given.  If x is a\n    number, return x.__int__().  For floating-point numbers, this truncates towards zero.\n\n    If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance\n    representing an integer literal in the given base.  The literal can be preceded by '+' or '-'\n    and be surrounded by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36. Base 0\n    means to interpret the base from the string as an integer literal. >>> int('0b100', base=0) 4\n\n===================================================================================================", "iter": "iter(args, kwargs):\n\n    iter(iterable) -> iterator iter(callable, sentinel) -> iterator\n\n    Get an iterator from an object.  In the first form, the argument must supply its own iterator,\n    or be a sequence. In the second form, the callable is called until it returns the sentinel.\n\n==================================================================================================", "last": "last(iterable: list | collections.abc.Iterable[typing.Any]) -> typing.Any:\n\n    Return the last element in an iterable collection.\n\n======================================================", "len": "len(args, kwargs):\n\n    Return the number of items in a container.\n\n==============================================", "list": "list(args, kwargs):\n\n    Built-in mutable sequence.\n\n    If no argument is given, the constructor creates a new empty list. The argument must be an\n    iterable if specified.\n\n==============================================================================================", "map": "map(args, kwargs):\n\n    Make an iterator that computes the function using arguments from each of the iterables.  Stops\n    when the shortest iterable is exhausted.\n\n==================================================================================================", "max": "max(args, kwargs):\n\n    max(iterable, *[, default=obj, key=func]) -> value max(arg1, arg2, *args, *[, key=func]) ->\n    value\n\n    With a single iterable argument, return its biggest item. The default keyword-only argument\n    specifies an object to return if the provided iterable is empty. With two or more positional\n    arguments, return the largest argument.\n\n================================================================================================", "min": "min(args, kwargs):\n\n    min(iterable, *[, default=obj, key=func]) -> value min(arg1, arg2, *args, *[, key=func]) ->\n    value\n\n    With a single iterable argument, return its smallest item. The default keyword-only argument\n    specifies an object to return if the provided iterable is empty. With two or more positional\n    arguments, return the smallest argument.\n\n================================================================================================", "next": "next(args, kwargs):\n\n    next(iterator[, default])\n\n    Return the next item from the iterator. If default is given and the iterator is exhausted, it is\n    returned instead of raising StopIteration.\n\n====================================================================================================", "object": "object(args, kwargs):\n\n    The base class of the class hierarchy.\n\n    When called, it accepts no arguments and returns a new featureless instance that has no instance\n    attributes and cannot be given any.\n\n====================================================================================================", "oct": "oct(args, kwargs):\n\n    Return the octal representation of an integer.\n\n    >>> oct(342391) '0o1234567'\n\n==================================================", "ord": "ord(args, kwargs):\n\n    Return the ordinal value of a character.\n\n    If the argument is a one-character string, return the Unicode code point of that character.\n\n    If the argument is a bytes or bytearray object of length 1, return its single byte value.\n\n===============================================================================================", "platform": "platform() -> str:\n\n    Return platform.system()\n\n    Returns the system/OS name, such as 'Linux', 'Darwin', 'Java', 'Windows'.\n\n    An empty string is returned if the value cannot be determined.\n\n=============================================================================", "pow": "pow(args, kwargs):\n\n    Equivalent to base**exp with 2 arguments or base**exp % mod with 3 arguments\n\n    Some types, such as ints, are able to use a more efficient algorithm when invoked using the\n    three argument form.\n\n===============================================================================================", "pow2_size": "pow2_size(size: str | tuple, format_size: bool = True) -> str | tuple:\n\n    Round a string dimension such as \"700x700\", or a tuple dimension such as (700, 700) to the\n    nearest power of 2 and format the result to a string dimension recognized by dgenerate.\n\n    This function expects a string with the format WIDTHxHEIGHT, or just WIDTH, or a tuple of\n    dimensions.\n\n    It returns a string in the same format with the dimension rounded to the nearest power of 2,\n    unless \"format_size\" is False, in which case it will return a tuple.\n\n================================================================================================", "quote": "quote(strings: str | collections.abc.Iterable[typing.Any], double: bool = False, quotes: bool = True) -> str:\n\n    Shell quote a string or iterable of strings.\n\n    The \"double\" argument allows you to change the outer quote character to double quotes.\n\n    The \"quotes\" argument determines whether to ddd quotes. If ``False``, only add the proper escape\n    sequences and no surrounding quotes. This can be useful for templating extra string content into\n    an existing string.\n\n====================================================================================================", "range": "range(args, kwargs):\n\n    range(stop) -> range object range(start, stop[, step]) -> range object\n\n    Return an object that produces a sequence of integers from start (inclusive) to stop (exclusive)\n    by step.  range(i, j) produces i, i+1, i+2, ..., j-1. start defaults to 0, and stop is omitted!\n    range(4) produces 0, 1, 2, 3. These are exactly the valid indices for a list of 4 elements. When\n    step is given, it specifies the increment (or decrement).\n\n====================================================================================================", "repr": "repr(args, kwargs):\n\n    Return the canonical string representation of the object.\n\n    For many object types, including most builtins, eval(repr(obj)) == obj.\n\n===========================================================================", "reversed": "reversed(args, kwargs):\n\n    Return a reverse iterator over the values of the given sequence.\n\n====================================================================", "round": "round(args, kwargs):\n\n    Round a number to a given precision in decimal digits.\n\n    The return value is an integer if ndigits is omitted or None.  Otherwise the return value has\n    the same type as the number.  ndigits may be negative.\n\n=================================================================================================", "set": "set(args, kwargs):\n\n    Build an unordered collection of unique elements.\n\n=====================================================", "size_is_aligned": "size_is_aligned(size: str | tuple, align: int) -> bool:\n\n    Check if a string dimension such as \"700x700\", or a tuple dimension such as (700, 700) is\n    aligned to a specific (\"align\") value. Returns True or False.\n\n    This function expects a string with the format WIDTHxHEIGHT, or just WIDTH, or a tuple of\n    dimensions.\n\n=============================================================================================", "size_is_pow2": "size_is_pow2(size: str | tuple) -> bool:\n\n    Check if a string dimension such as \"700x700\", or a tuple dimension such as (700, 700) is a\n    power of 2 dimension. Returns True or False.\n\n    This function expects a string with the format WIDTHxHEIGHT, or just WIDTH, or a tuple of\n    dimensions.\n\n===============================================================================================", "slice": "slice(args, kwargs):\n\n    slice(stop) slice(start, stop[, step])\n\n    Create a slice object.  This is used for extended slicing (e.g. a[0:10:2]).\n\n===============================================================================", "sorted": "sorted(args, kwargs):\n\n    Return a new list containing all items from the iterable in ascending order.\n\n    A custom key function can be supplied to customize the sort order, and the reverse flag can be\n    set to request the result in descending order.\n\n==================================================================================================", "str": "str(args, kwargs):\n\n    str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str\n\n    Create a new string object from the given object. If encoding or errors is specified, then the\n    object must expose a data buffer that will be decoded using the given encoding and error\n    handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object).\n    encoding defaults to 'utf-8'. errors defaults to 'strict'.\n\n==================================================================================================", "sum": "sum(args, kwargs):\n\n    Return the sum of a 'start' value (default: 0) plus an iterable of numbers\n\n    When the iterable is empty, return the start value. This function is intended specifically for\n    use with numeric values and may reject non-numeric types.\n\n==================================================================================================", "total_memory": "total_memory(device: str | None = None, unit: str = 'b'):\n\n    Get the total ram that a specific device possesses.\n\n    This will always return 0 for \"mps\".\n\n    The \"device\" argument specifies the device, if none is specified, the systems default\n    accelerator will be used, if a GPU is installed, it will be the first GPU.\n\n    The \"unit\" argument specifies the unit you want returned, must be one of (case insensitive): b\n    (bytes), kb (kilobytes), mb (megabytes), gb (gigabytes), kib (kibibytes), mib (mebibytes), gib\n    (gibibytes)\n\n==================================================================================================", "tuple": "tuple(args, kwargs):\n\n    Built-in immutable sequence.\n\n    If no argument is given, the constructor returns an empty tuple. If iterable is specified the\n    tuple is initialized from iterable's items.\n\n    If the argument is a tuple, the return value is the same object.\n\n=================================================================================================", "type": "type(args, kwargs):\n\n    type(object) -> the object's type type(name, bases, dict, **kwds) -> a new type\n\n===================================================================================", "unquote": "unquote(strings: str | collections.abc.Iterable[typing.Any], expand: bool = False, glob_hidden: bool = False, glob_recursive: bool = False) -> list:\n\n    Un-Shell quote a string or iterable of strings (shell parse)\n\n    The \"expand\" argument can be used to indicate that you wish to expand shell globs and the home\n    directory operator.\n\n    The \"glob_hidden\" argument can be used to indicate that hidden files should be included in globs\n    when expand is True.\n\n    The \"glob_recursive\" argument can be used to indicate that globbing should be recursive when\n    expand is True.\n\n====================================================================================================", "zip": "zip(args, kwargs):\n\n    The zip object yields n-length tuples, where n is the number of iterables passed as positional\n    arguments to zip().  The i-th element in every tuple comes from the i-th iterable argument to\n    zip().  This continues until the shortest argument is exhausted.\n\n    If strict is true and one of the arguments is exhausted before the others, raise a ValueError.\n\n       >>> list(zip('abcdefg', range(3), range(4)))    [('a', 0, 0), ('b', 1, 1), ('c', 2, 2)]\n\n=================================================================================================="}
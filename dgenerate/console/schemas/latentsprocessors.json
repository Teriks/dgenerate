{"interposer": {"source": {"optional": false, "types": ["str"]}, "target": {"optional": false, "types": ["str"]}, "device": {"optional": false, "types": ["str"], "default": "cpu"}, "model-offload": {"optional": false, "types": ["bool"], "default": false}, "PROCESSOR_HELP": "interposer:\n    arguments:\n        source: str\n        target: str\n        device: str = \"cpu\"\n        model-offload: bool = False\n\n    Converts latents between different diffusion model latent spaces.\n\n    This processor uses pre-trained models to convert latents from one diffusion model's latent\n    space to another (e.g., SD1.x to SDXL, SDXL to SD3). The required conversion models are\n    downloaded from the Hugging Face Hub or loaded from local cache when available.\n\n    This only works on fully denoised latents.\n\n    Supported conversions:\n    - v1 (SD 1.x) \u2194 xl (SDXL) \u2194 v3 (SD3)\n    - fx (Flux) \u2192 v1/xl/v3\n    - ca (Stable Cascade) \u2192 v1/xl/v3\n\n    VAE scaling factors are applied automatically based on the source and target latent spaces.\n\n    The \"source\" argument represents the input latents format, and can be one of:\n\n    * v1 (sd1.5/sd2)\n    * xl (sdxl)\n    * v3 (sd3)\n    * fx (flux)\n    * ca (stable cascade)\n\n    The \"target\" argument represents the output latents format, and can be one of: v1, xl, or v3\n\n    The \"device\" argument can be used to set the device the processor will run on, for example: cpu,\n    cuda, cuda:1.\n\n    The \"model-offload\" argument can be used to enable cpu model offloading for a processor. If this\n    is disabled, any torch tensors or modules placed on the GPU will remain there until the\n    processor is done being used, instead of them being moved back to the CPU after each invocation.\n    Enabling this may help save VRAM when using a latents processor but will impact rendering speed\n    with multiple inputs / outputs."}, "noise": {"timestep": {"optional": false, "types": ["int"], "default": 100}, "seed": {"optional": true, "types": ["int"], "default": null}, "PROCESSOR_HELP": "noise:\n    arguments:\n        timestep: int = 100\n        seed: int | None = None\n\n    Injects noise into latents tensors using the pipeline's scheduler.\n\n    This processor uses the scheduler's add_noise() method to properly inject noise according to the\n    diffusion model's noise schedule, making it suitable for denoising experiments and creative\n    latent space manipulation. The noise injection respects the training schedule of the diffusion\n    models, ensuring that the added noise follows the same distribution and scaling as during\n    training.\n\n    The \"timestep\" argument controls the amount of noise added to the latents. Higher timestep\n    values result in more noise, lower values result in less noise, following the diffusion model's\n    training schedule. This provides direct control over the noise level without additional scaling\n    factors.\n\n    If \"seed\" is provided, the random number generator will be seeded for reproducible noise\n    generation across multiple runs."}, "scale": {"factor": {"optional": false, "types": ["float"], "default": 1.0}, "clamp-min": {"optional": true, "types": ["float"], "default": null}, "clamp-max": {"optional": true, "types": ["float"], "default": null}, "normalize": {"optional": false, "types": ["bool"], "default": false}, "PROCESSOR_HELP": "scale:\n    arguments:\n        factor: float = 1.0\n        clamp-min: float | None = None\n        clamp-max: float | None = None\n        normalize: bool = False\n\n    Scales and normalizes latents tensors.\n\n    This processor provides scaling, clamping, and normalization operations for latents tensors,\n    useful for controlling the magnitude and range of latent representations. The scaling is applied\n    first, followed by optional normalization to unit variance, and finally value clamping.\n\n    The \"factor\" argument multiplies all tensor values by the specified factor. Values greater than\n    1.0 increase the magnitude while values less than 1.0 decrease it. If \"normalize\" is enabled,\n    the tensor will be normalized to have unit variance after scaling. The \"clamp_min\" and\n    \"clamp_max\" arguments can be used to constrain the final values to a specific range.\n\n    This processor is useful for adjusting the dynamic range of latents before or after other\n    processing steps in the diffusion pipeline."}}
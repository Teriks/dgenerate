{"noise": {"timestep": {"optional": false, "types": ["int"], "default": 100}, "seed": {"optional": false, "types": ["int"], "default": null}, "PROCESSOR_HELP": "noise:\n    arguments:\n        timestep: int = 100\n        seed: int = None\n\n    Injects noise into latents tensors using the pipeline's scheduler.\n\n    This processor uses the scheduler's add_noise() method to properly inject noise according to the\n    diffusion model's noise schedule, making it suitable for denoising experiments and creative\n    latent space manipulation. The noise injection respects the training schedule of the diffusion\n    models, ensuring that the added noise follows the same distribution and scaling as during\n    training.\n\n    The \"timestep\" argument controls the amount of noise added to the latents. Higher timestep\n    values result in more noise, lower values result in less noise, following the diffusion model's\n    training schedule. This provides direct control over the noise level without additional scaling\n    factors.\n\n    If \"seed\" is provided, the random number generator will be seeded for reproducible noise\n    generation across multiple runs.\n\n    Abstract base class for latents processor implementations.\n\n    Latents processors perform tensor manipulation on latent space representations in diffusion\n    pipelines. They can handle operations like noise injection, scaling, blurring, and other latent\n    space transformations."}, "scaler": {"scale": {"optional": false, "types": ["float"], "default": 1.0}, "clamp-min": {"optional": false, "types": ["float"], "default": null}, "clamp-max": {"optional": false, "types": ["float"], "default": null}, "normalize": {"optional": false, "types": ["bool"], "default": false}, "PROCESSOR_HELP": "scaler:\n    arguments:\n        scale: float = 1.0\n        clamp-min: float = None\n        clamp-max: float = None\n        normalize: bool = False\n\n    Scales and normalizes latents tensors.\n\n    This processor provides scaling, clamping, and normalization operations for latents tensors,\n    useful for controlling the magnitude and range of latent representations. The scaling is applied\n    first, followed by optional normalization to unit variance, and finally value clamping.\n\n    The \"scale\" argument multiplies all tensor values by the specified factor. Values greater than\n    1.0 increase the magnitude while values less than 1.0 decrease it. If \"normalize\" is enabled,\n    the tensor will be normalized to have unit variance after scaling. The \"clamp_min\" and\n    \"clamp_max\" arguments can be used to constrain the final values to a specific range.\n\n    This processor is useful for adjusting the dynamic range of latents before or after other\n    processing steps in the diffusion pipeline.\n\n    Abstract base class for latents processor implementations.\n\n    Latents processors perform tensor manipulation on latent space representations in diffusion\n    pipelines. They can handle operations like noise injection, scaling, blurring, and other latent\n    space transformations."}}
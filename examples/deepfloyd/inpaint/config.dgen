#! /usr/bin/env dgenerate --file
#! dgenerate 4.4.2

\set image_to_vary ../../media/dog-on-bench.png
\set mask_image ../../media/dog-on-bench-mask.png

\set token %HF_TOKEN%

{% if not token.strip() and not '--auth-token' in injected_args %}
    \print Set HF_TOKEN environmental variable or --auth-token to run this example!
    \exit
{% endif %} !END


DeepFloyd/IF-I-M-v1.0
--variant fp16
--dtype float16
--model-type torch-if
--model-sequential-offload
--inference-steps 30
--guidance-scales 10
--gen-seeds 2
--image-seeds "{{ image_to_vary }};{{ mask_image }}"
--prompts "An orange cat sitting on a bench; fake, artwork, cartoon"
--output-prefix stage1

\save_modules stage_1_modules feature_extractor

# The output of the previous stage needs to be passed to the "floyd=" argument of --image-seeds
# when doing an inpaint generation. This can be done with Jinja2 templating, --seeds-to-image is used
# to indicate that --seeds is mentioning a seed for each input image and not combinations to try.


DeepFloyd/IF-II-M-v1.0
--variant fp16
--dtype float16
--model-type torch-ifs
--model-sequential-offload
--inference-steps 30
--guidance-scales 10
--prompts {{ format_prompt(last_prompts) }}
--seeds {{ last_seeds | join(' ') }}
--seeds-to-images
--image-seeds {% for image in last_images %}"{{image_to_vary}};mask={{mask_image}};floyd={{image}}" {% endfor %}
--output-prefix stage2

# The final stage of Deep Floyd IF is upscaling, some of the modules from
# the stage1 pipeline that were saved above will be reused on this pipeline.

\use_modules stage_1_modules

stabilityai/stable-diffusion-x4-upscaler
--variant fp16
--dtype float16
--model-type torch-upscaler-x4
--inference-steps 30
--prompts {{ format_prompt(last_prompts) }}
--seeds {{ last_seeds | join(' ') }}
--seeds-to-images
--image-seeds {{ quote(last_images) }}
--upscaler-noise-levels 100
--output-prefix stage3

# Clear out any saved modules from memory

\clear_modules
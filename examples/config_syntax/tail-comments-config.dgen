#! /usr/bin/env dgenerate --file
#! dgenerate 4.5.1

# the ability to use tail comments requires a non trivial parse
# that creates some penalty over the usage of the # character
# in specific places


# when the comment token (#) exists inside a complete string
# and no unterminated string exists on the line, (or in actuality
# the line is fully lexible into distinct string and text tokens), the
# hashtag does not need to be escaped

\set test_var "hello # world!" # this tail comment will be removed

{% if test_var != '"hello # world!"' %}
    \print FAILED CASE 1: {{ quote(test_var) }}
    \exit 1
{% endif %}

\print RESULT CASE 1: {{ test_var }}



# when the comment token exists inside an uncompleted string, such as
# when you are preforming a continuation on a prompt, you must escape it
# if you want it to appear literally. However, a quoted string always quotes
# the comment token, so the first string in this case does not need an escape

\set test_var "hello # world!" "I have \# an escaped comment token # this tail comment will be removed

{% if test_var != '"hello # world!" "I have # an escaped comment token' %}
    # if test_var as a raw string contains an unquoted / unescaped # token, it
    # will be considered a comment inside of a heredoc style config template when it
    # is expanded, so you should quote it in some way if you want to see its
    # true value via \print

    \print FAILED CASE 2: {{ quote(test_var) }}
    \exit 1

{% endif %}


# here quoting # is not needed, because \print itself is expanding the template
# after topical lexing of comments, and parsing of continuations, the same is true
# for the \set directive

\print RESULT CASE 2: {{ test_var }}


# outside of a string, in plain text tokens \# needs to be escaped
# if you do not want it to become a comment

\set test_var hello \# world! # this tail comment will be removed

{% if test_var != 'hello # world!' %}
    \print FAILED CASE 3: {{ quote(test_var) }}
    \exit 1
{% endif %}

\print RESULT CASE 3: {{ test_var }}


# sometimes you may want a string, or some other definition
# like a command definition that is defined over multiple lines
# with tail comments, in this case the # symbol needs to be escaped
# in your multi line string if you want it to appear literally
# due to case 2 above


\set test_var "I want a literal hashtag here \# \ # and then a continuation and comment!
               but I dont want my comment in my continuation!" # even more comments!


{% if test_var != '"I want a literal hashtag here # but I dont want my comment in my continuation!"' %} # there can be comment here
    \print FAILED CASE 4: {{ quote(test_var) }} # comment time :)
    \exit 1
{% endif %}

\print RESULT CASE 4: {{ test_var }}




# the comment token must be escaped in all strings which are continuations

\set test_var "This string continues on \ # comment
              to the next line, but I want a hash \# right here so I have to escape it" # comment

{% if test_var != '"This string continues on to the next line, but I want a hash # right here so I have to escape it"' %}
    \print FAILED CASE 5: {{ quote(test_var) }}
    \exit 1
{% endif %}

\print RESULT CASE 5: {{ test_var }}



# multiple escapes are possible, even with trailing comments after

\set test_var hello \# world!    \# theres a literal hashtag behind me preceded by some space # but I end with a comment

{% if test_var != 'hello # world!    # theres a literal hashtag behind me preceded by some space' %}
    \print FAILED CASE 6: {{ quote(test_var) }}
    \exit 1
{% endif %}

\print RESULT CASE 6: {{ test_var }}



# escaped comment tokens in unterminated strings are replaced with just the comment token

\set test_var "hello \# world! # I am now a comment

{% if test_var != '"hello # world!' %}
    \print FAILED CASE 7: {{ quote(test_var) }}
    \exit 1
{% endif %}

\print RESULT CASE 7: {{ test_var }}


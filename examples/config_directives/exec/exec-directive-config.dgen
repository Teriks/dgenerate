#! /usr/bin/env dgenerate --file
#! dgenerate 5.0.0

# run dgenerate as a subprocess, read a config
# and send stdout and stderr to a file
# in a platform independent way

\exec dgenerate < subprocess.dgen &> log.txt

# use python to access dgenerate's Python environment and libraries

\exec python -c "import sys; print('Python version:', sys.version)" > python_info.txt

\exec python -c "import torch; print('PyTorch version:', torch.__version__)" > pytorch_info.txt


{% if platform() == 'Windows' %}

    # chaining processes together with pipes is supported
    # this example emulates 'cat' on Windows using cmd

    \exec cmd /c "type subprocess.dgen" | dgenerate &> log2.txt

{% else %}

    # on a Unix platform you could simply use cat

    \exec cat subprocess.dgen | dgenerate &> log2.txt

{% endif %}